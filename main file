#Modules
import random, time, datetime, os, math, tkinter as tk, threading, string, sqlite3
from tkinter import *

# Connect to the database or create a new one if it doesn't exist
conn = sqlite3.connect('scores.db')

# Create a table to store scores if it doesn't exist
conn.execute('''CREATE TABLE IF NOT EXISTS scores
                (id INTEGER PRIMARY KEY AUTOINCREMENT,
                 name TEXT,
                 score INTEGER);''')

# function to insert new score into the database
def add_score(name, score):
    conn.execute(f"INSERT INTO scores (name, score) VALUES ('{name}', {score})")
    conn.commit()

# function to retrieve the top 3 lowest number scores
def get_top_scores():
    scores = conn.execute("SELECT * FROM scores ORDER BY score ASC LIMIT 3").fetchall()
    return scores



    
# example usage:
"""
"""
#add_score("Player 3", 50)
#add_score("Player 4", 125)
#print(get_top_scores())
#This entire code segment acts as sort of a timer we might use in the future for this game, looks useful
# Create class that acts as a countdown
def countdown(h, m, s):
    # Calculate the total number of seconds
    total_seconds = h * 3600 + m * 60 + s
    # While loop that checks if total_seconds reaches zero
    # If not zero, decrement total time by one second
    while total_seconds > 0:
        # Timer represents time left on countdown
        timer = datetime.timedelta(seconds = total_seconds)
        # Prints the time left on the timer
        print(timer, end="\r")
        # Delays the program one second
        time.sleep(1)
        # Reduces total time by one second
        total_seconds -= 1

#Defining to clear the screen whenever we need it
def cls():
    os.system('cls' if os.name=='nt' else 'clear')

#Text to introduce the user
def text():
    print("Creators: Anonymous")
    print("\t\t\t   ============================")
    print("\t\t\t             Welcome!")
    print("\t\t\t   ============================")
    print("")
    print("")

#Global variables
global playerAttackPower
global average
average = 0 
money = 50
health = 25
chips =  25
inventory = []  
weapons = []
equipment = []
discovered = []
count_pop1 = True
count_pop2 = True
t3_exist = True
t2_exist = True
t1_exist = True
playerAttackPower = 7

#testing other planet bosses, will remove later
#inventory.append("Tier_1_Medallion")
#inventory.append("Tier_2_Medallion")

"""
This function takes a prompt, which prints whatever we want to ask the user, and has an expected value, which is the value
we want from the user, it can be multiple values denoted by the * or just a single value. In calling it, if we want multiple
values we just enter the value after each comma. Data types can be mixed as well. Finally theres an error message parameter
that can be anything, just have to put error_message = ""
This is the main part of the function. It first initializes a counter variable attempts to 0. Then it enters an infinite loop
using the while True statement. Within the loop, it prompts the user with the prompt string and accepts their input as a string.
It then loops over each expected value and its corresponding type using the enumerate() function. For each expected value, it
tries to convert the user's input to the corresponding type using t(user_input). If the conversion succeeds and the converted
input matches the expected value, then the expected value is returned. If the conversion fails, then the loop continues to the
next expected value. If none of the expected values match the user's input after all iterations, then the loop continues to
the next iteration and increments attempts by 1. If the attempts counter reaches the attempts_limit, then the console screen
is cleared using the cls() function. Otherwise, if an error_message was provided, then it is printed to the console. The loop
then continues to the next iteration and prompts the user again. This process continues until the user inputs one of the
expected values, at which point the expected value is returned and the function exits.

Idea List:

"""

def universal_input(prompt, *expected, error_message="", attempts_limit=6):
    #This line creates a list of types for each expected value using a list comprehension.
    types = [type(e) for e in expected]
    attempts = 0
    while True:
        user_input = input(prompt)
        for i, t in enumerate(types):
            try:
                input_as_type = t(user_input)
                if input_as_type == expected[i]:
                    return expected[i]
            except ValueError:
                pass
        attempts += 1
        if attempts % attempts_limit == 0:
            cls()
        elif error_message:
            print(error_message)

def game_choice():
    clear_count = 0
    e = datetime.datetime.now()
    print("Today's date: %s/%s/%s" % (e.month, e.day, e.year))
    text()
    first = True
    print("1: A space adventure game where players control a spaceship and have to explore different\nplanets, fight alien enemies, and upgrade their ship with new weapons and equipment.")
    game_num = universal_input("Enter the number of the game you want to play: ", 1, error_message = "You entered the wrong value, try again.")
    if game_num == 1:
        cls()
        first = False
        space_game()

def space_game():
    #this if for factions that we can create or that im creating now.. 
    #it innizalies the player to this class and allows them to have a faction assinged to the player and have faction repuation
    class Player:
        def __init__(self, name):
            self.name = name
            self.faction = None
            self.reputation = {"United Space Alliance": 0, "Rebel Alliance:": 0,"Pirate Brotherhood": 0, "Corporate Syndicate":0}
            self.quests = []

            
    
    
    def spaceship_disaster():
        cls()
        x = random.randint(2,10)
        if x == 10:
            
            print("ERROR ERROR CRITICAL MALFUNCTION!! CAPTAIN " + name + "!! YOU MUST MAKE NECESSARY REPAIRS.")
            # Generate a random number between 1 and 3 to determine the type of malfunction
            error_type = random.randint(1, 3)
            
            if error_type == 1:
                print("The Engine has failed! You have to restart the engine!")
                print("Complete the challenge to save the ship.")
                prompt = input("QUICK WHAT IS THE SQUARE ROOT OF 144? ")
                if prompt == "12":
                    print("You did it! The ship has been saved!")
                else:
                    print("That was a test the ship was never going to fail...\n You have been put in jail for 5 minutes..\n Have fun! ")
                    countdown(0, 5, 0)
            
            elif error_type == 2:
                
                print("The Life Support Systems are malfunctioning!")
                print("Hurry! What type of lion never roars?")
                answer = universal_input("Answers are 1. dandelion 2. A lion cub 3. A mountain lion 4. A captured lion ", "1","2","3","4", error_message ="BRO THIS IS SERIOUS PICK ONE!!!!!")
                if answer == "1":
                    ("Correct!!!! YOU SAVED US LETS GOOOOOOOOOOOOOOOOOOOOOOOO")
                    
                else:
                    print("That was a test the ship was never going to fail...\n You have been put in jail for 5 minutes..\n Have fun! ")
                    countdown(0, 5, 0)
                    
            else:
                print("The Communications Systems are down! Solve the riddle to fix the communication system. ")
                answer = universal_input("What tree do we all carry in our hands?\n Answers are 1. Cedar 2. Oak 3. Palm  4. Eucalyptus", "1","2","3","4", error_message ="BRO THIS IS SERIOUS PICK ONE!!!!!")
                if answer == "3":
                    ("Correct!!!! YOU SAVED US LETS GOOOOOOOOOOOOOOOOOOOOOOOO")
                    
                else:
                    print("That was a test the ship was never going to fail...\n You have been put in jail for 5 minutes..\n Have fun! ")
                    countdown(0, 5, 0)
                    
    #here is a equip and unequip system.

        
        # function to equip a weapon from inventory
    def equip_weapon():

            
        print("Weapons:")
        for i, weapon in enumerate(weapons):
            print(f"{i+1}: {weapon}")
        print("Enter the number of the weapon you want to equip:")
        
            # get user input and validate it
        weapon_index = None
        while weapon_index is None:
            try:
                weapon_index = int(input("> "))
                if weapon_index < 1 or weapon_index > len(weapons):
                    print("Invalid input. Enter a number between 1 and", len(weapons))
                    weapon_index = None
                
            except ValueError:
                print("Invalid input. Enter a number.")
        equipped_weapon = weapons[weapon_index-1]
        print(f"{equipped_weapon} equipped.")
        if equipped_weapon == "Laser Cannon" or equipped_weapon == "Plasma Torpedo" or equipped_weapon == "Ion Cannon" :
            return 5 
            #print(str(playerAttackPower))
            
        elif equipped_weapon == " 4: Gravity Bomb" or  equipped_weapon == " 5: Photon Blaster" or  equipped_weapon == " 6: Proton Beam" or  equipped_weapon == " 7: Electro-Magnetic Pulse Cannon" :
            return 15
        elif equipped_weapon == " 7: Neutron Cannon" or equipped_weapon == " 8: Disruptor Ray" :
            return 40
        elif equipped_weapon == " 9: Anti-Matter Missile":
            return 55
            
        # function to unequip the current weapon
    def unequip_weapon():
        global equipped_weapon
            
        if equipped_weapon is not None:
            print(f"{equipped_weapon} unequipped.")
            equipped_weapon = None
        else:
            print("No weapon equipped.")
            
        # example usage
        
        
        # prompt user to equip or unequip weapons
    def equiporunequip():
        while True:
            print("\nMenu:")
            print("1. Equip weapon")
            print("2. Unequip weapon")
            print("3. View inventory")
            print("4. Exit")
                
                # get user input and validate it
            choice = None
            while choice is None:
                try:
                    choice = int(input("> "))
                    if choice < 1 or choice > 4:
                        print("Invalid input. Enter a number between 1 and 4.")
                        choice = None
                except ValueError:
                    print("Invalid input. Enter a number.")
            
            if choice == 1:
                equip_weapon()
            elif choice == 2:
                unequip_weapon()
            elif choice == 3:
                print("Inventory:")
                for weapon in inventory:
                    print(weapon)
            elif choice == 4:
                break
    
    #Globalizing variables
    
    global money
    global health
    global inventory
    global weapons
    global equipped_weapon
    global weaponsTier1
    global diplo_mission
    global search_mission
    global imperial_plans
    global sabotage_supply
    global rescue_prisoners
    global secure_contract
    global eliminate_rival
    global smuggle_goods
    global raid_convy 
    global eliminate_pirate
    global steal_artifact
    global smuggle_contraband 
    global speed_times 
    speed_times = [] 
    equipped_weapon = None
    #Welcome the user to the game
    name = input("What is your name competitor? ")
    name = name.strip()
    #Uppercase first letter if not entered right
    while not name:
        print("You cant have an empty name, try again")
        name = input("What is your name competitor? ")
        name = name.strip()
        if len(name) > 0:
            name = name[0].upper() + name[1:]
    if len(name) > 0:
        name = name[0].upper() + name[1:]
    cls()
    print("Welcome to the space adventure " + name + ", good luck on your journey!")
    player = Player(name)
    #missions 
    diplo_mission = False
    search_mission = False
    imperial_plans = False 
    sabotage_supply = False 
    rescue_prisoners = False 
    secure_contract = False
    eliminate_rival = False
    smuggle_goods = False 
    raid_convy = False
    eliminate_pirate = False
    steal_artifact = False
    smuggle_contraband =  False 
    #List of planets
    planetsTier1 = ["1. Mercury", "2 . Venus "]
    planetsTier2 = ["3. Mars", "4. Jupiter", "5. Saturn "]
    planetsTier3 = ["6. Uranus", "7. Pluto", "8. Neptune "]
    
    catastrophic_weather_events = ["Mercurial Weather-Flip", "Venetian Nuclear-Winter", 
    "Martian Dust Storm", "The Great Red Spot", "Saturnian Ice Rain", "Uranian Acid Rain",
    "Neptunian Diamond Rain", "Plutonian Freeze-Over"]
    
    #Equipment
    equipmentsTier1 = ["$100 1: Ammo cache","$100 2: Medkit", "$350 3: Grapple Gun", "$450 4: Heatshield"]
    equipmentsTier2 = ["$500 5: Oxygen Mask Tier 2", "$600 6: Jetpack"]
    equipmentsTier3 = ["$1000 7: Oxygen Mask Tier 3"]
    
    weaponsTier1 = ["$50 1: Laser Cannon", "$50 2: Plasma Torpedo", "$50 3: Ion Cannon"]
    
    weaponsTier2 =["$200 4: Gravity Bomb", "$400 5: Photon Blaster", 
    "$550 6: Proton Beam", "$750 7: Electro-Magnetic Pulse Cannon"]
    
    weaponsTier3 = ["$900 8: Neutron Cannon", "$1150 9: Disruptor Ray", "$1500 10: Anti-Matter Missile"]
    
    spaceship_mods = ["Stationary Hovering", "Improved engines", "Advanced Shields", "Advanced weapons systems", 
    "Advanced medical facilities", "Stealth technology", "Advanced sensors"]
    
    clear_counter = 0
    starting_weapon = universal_input("\nYou have a choice between these starting weapons:" +"\n" +  str(weaponsTier1[0][3:]) + str(weaponsTier1[1][3:]) + str(weaponsTier1[2][3:]) + "\n\n(Type number) Which do you choose? ", 1,2,3, error_message = "That is not a weapon to pick, try again.")
    weapons.append(weaponsTier1[starting_weapon - 1][7:])
    print("You have selected: " + weaponsTier1[starting_weapon - 1][7:])
    print("")
    print("Ralphy: Ahoy Captain " + name + "!, I see you aren't familiar around here eh? Well, let me introduce\nyeh around. Here, ye will find all the goods and riches you will need to go on your\njourney around the solar system, ye will see me time after time, buying all the stuff ye\nwill need to travel around.\n\nRalphy: Next, ye will find that this ship has five main areas to travel around. Starting with the engine room, it be the heart of the ship, where all the power and propulsion comes from.\n\nRalphy: Next, we have the bridge, where me and me crew steer the ship and plot our course. Thirdly, we have the medical center, where we tend to any injuries or illnesses that may arise on ye voyage.\n\nRalphy: The cargo bay is where we keep all our dabloons and and riches, and anything we will be takin in. Last and not least, we have Mead's Hall, where we gather to feast after a long day of traveling. Welcome aboard matey!\n")
    continuing = universal_input("Continue? (Y/N)", "yes", "Yes", "y", "Y", error_message = "")
    cls()
    ralphs_shop = []
    ralphs_equipment_shop = []
    #Planet selection function
    print("Welcome to the cockpit Captain " + name + "\nYour first destinations of travel are " + str(planetsTier1))
    def planetSelect():
        global inventory
        global diplo_mission
        questPlanets = []
        if diplo_mission == True:
            questPlanets.append("9. Start diplomatic mission")
        elif search_mission == True:
            questPlanets.append("10. Start search and rescue mission")
        elif imperial_plans == True:
            questPlanets.append("11. Steal Imperial plans ")
        elif sabotage_supply == True:
            questPlanets.append("12. Sabotage Imperial supply ")
        elif rescue_prisoners == True:
            questPlanets.append("13. Rescue Rebel Prisoners")
        elif secure_contract == True:
            questPlanets.append("14. Secure mining contract")
        elif eliminate_rival == True:
            questPlanets.append("15. Eliminate a rival syndicate's leader")
        elif smuggle_goods == True :
            questPlanets.append("16. Smuggle illegal goods past the Empire's blockade ")
        elif raid_convy == True :
            questPlanets.append("17. Raid a wealthy merchant convoy")
        elif eliminate_pirate == True:
            questPlanets.append("18. Eliminate a rival pirate crew")
        elif steal_artifact == True:
            questPlanets.append("19. Steal a valuable artifact from a heavily guarded museum")
        elif smuggle_contraband == True:
            questPlanets.append("20. Smuggle contraband past a space station's security")
        if "Tier_1_Medallion" in inventory and "Tier_2_Medallion" in inventory:
            
            planetSelection = universal_input(planetsTier1 + planetsTier2 + planetsTier3 + questPlanets , 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20, error_message = "That is not a planet, try again.")
        elif "Tier_1_Medallion" in inventory:
            planetSelection = universal_input(planetsTier1 + planetsTier2 + questPlanets , 1,2,3,4,5,10,11,12,13,14,15,16,17,18,19,20, error_message = "That is not a planet, try again.")
        else:
            planetSelection = universal_input(planetsTier1  + questPlanets , 1,2,10,11,12,13,14,15,16,17,18,19,20, error_message = "That is not a planet, try again.")
            clear_counter = 0
        return planetSelection
        
    def hud():
        print("\t\t\t\t\tSpaceman: " + name + "\n\t\t\t\t\t\t\t\t\t\tMoney:" + str(money) + "\n\t\t\t\t\t\t\t\t\t\tHP:" + str(health))
    
    def game_over_screen():
        print("   _____        _        __    __   ________")
        print("  /            / \      |  \  /  | |")
        print(" /            /   \     |   \/   | |")
        print("|    ____    /_____\    |        | |________")
        print("|       |   /       \   |        | |")
        print(" \      |  /         \  |        | |")
        print("  \_____| /           \ |        | |________")
        print("  _______                ________  _____")
        print(" |       | \          / |         |     |")
        print(" |       |  \        /  |         |_____|     ")   
        print(" |       |   \      /   |________ |\ ")
        print(" |       |    \    /    |         |  \ ")
        print(" |       |     \  /     |         |    \ ")
        print(" |_______|      \/      |________ |      \ ")
    
    
    #The planet function game 
    def atPlanetActions(planetSelection):
        global money
        global health
        global inventory
        global weapons
        
        def diplomatic_mission():
            cls()
            print("You arrive at Ambassador Lee's office and are greeted by a friendly face.")
            print("Ambassador Lee: Ah, you must be the one we've been expecting. We have an important diplomatic mission for you.")
            print("Ambassador Lee: We need you to travel to a neighboring planet to represent the United Space Alliance in discussions with their leaders.")
            print("Ambassador Lee: Your mission is to establish a relationship with the planet's leaders and discuss possible cooperation and trade agreements. Good luck!")
            time.sleep(10)
            cls()
            print("You arrive on the neighboring planet and are greeted by a delegation of officials. They lead you to a grand hall where the planet's leaders await.") 
            print("As you approach, you can sense the tension in the air. The leaders seem wary of your presence.")
            print("You introduce yourself and explain the purpose of your visit. They listen intently as you describe the benefits of cooperation and trade between our two planets.")
            print("After some discussion, one of the leaders speaks up. 'We are interested in what you have to offer, but we have some concerns about the stability of your government.'")
            while True:
                choice = input("How would you like to respond? \n1. Assure them that the United Space Alliance is a stable and reliable partner. \n2. Acknowledge their concerns and ask if there is anything specific they are worried about. \n3. Offer to provide more information about our government and policies.\nChoice: ")
                if choice == "1":
                    print("You assure them that the United Space Alliance is a stable and reliable partner, and offer to provide more information if they have any specific concerns.")
                    break
                elif choice == "2":
                    print("You acknowledge their concerns and ask if there is anything specific they are worried about. They mention recent news reports about political instability in your home planet. You explain that those reports have been exaggerated and provide evidence to support your claims.")
                    break
                elif choice == "3":
                    print("You offer to provide more information about our government and policies. They agree to review the information and continue discussions at a later time.")
                    break
                else:
                    print("Invalid choice. Please choose a valid option.")
            print("The leaders seem satisfied with your response, and agree to further discussions about cooperation and trade.")
            # mini-game: trade negotiation simulation
            
            print("To finalize the trade agreement, the planet's leaders have requested a simulation of a trade negotiation. Are you ready to begin?")
            choice = input("Type 'yes' to begin or 'no' to decline: ")
            if choice.lower() == "yes":
                cls()
                print("You sit down at a negotiation table with the planet's representatives. They present their terms for the trade agreement and you must negotiate the best deal for the United Space Alliance.")
                # generate random trade values
                your_offer = random.randint(100, 200)
                their_offer = random.randint(50, 150)
                # compare trade values and determine outcome
                if your_offer >= their_offer:
                    print(f"You successfully negotiate a favorable trade agreement! The leaders congratulate you and finalize the deal.")
                    print("You conclude the meeting and return to Ambassador Lee with the good news. He thanks you for your service and tells you to return to your room to turn in the quest.")
                    inventory.append("diplomatic report")
                    return_ship()
                    backFromPlanet()
                else:
                    print(f"The trade negotiation is unsuccessful. The leaders express disappointment and the trade deal falls through.")
                    print("You conclude the meeting and return to Ambassador Lee with the bad news. He expresses his disappointment and reminds you to try harder next time.")
            else:
                print("You decline the trade negotiation simulation. The leaders express disappointment but agree to continue with the trade discussions.")
                print("You conclude the meeting and return to Ambassador Lee. He thanks you for your service and tells you to return to your room to turn in the quest.")
                inventory.append("diplomatic report")
                return_ship()
                cls()
                backFromPlanet()
                
                
        def search_and_rescue_mission():
            global money
            global health
            global inventory
            global weapons
            
            cls()
            print("You report to Commander Smith, who briefs you on the situation. A research station on a remote moon has lost contact with us, and we suspect it has been attacked by space pirates.")
            print("Commander Smith: We need you to investigate the station and rescue any surviving personnel. The pirates are dangerous, so be careful.")
            print("Commander Smith hands you a map of the moon and some equipment, and wishes you good luck.")
            time.sleep(5)
            cls()
            print("You land your ship on the moon and use the map to navigate to the research station. As you approach, you see that it has been badly damaged by a pirate attack.")
            print("You cautiously make your way inside, searching for any signs of life. You hear noises coming from one of the rooms and rush over to investigate.")
            print("You find a researcher hiding in a corner. She tells you that the pirates attacked the station and took some of her colleagues captive.")
            print("Researcher: Please help us! The pirates are going to sell us as slaves!")
            while True:
                choice = input("How would you like to proceed? \n1. Sneak around and try to rescue the captives without being detected. \n2. Fight the pirates head-on to rescue the captives. \n3. Negotiate with the pirates to free the captives.\nChoice: ")
                if choice == "1":
                    print("You decide to sneak around the station and try to rescue the captives without being detected.")
                    # mini-game: stealth section
                    if mini_game_stealth():
                        print("You successfully rescue the captives and make your way back to your ship.")
                        break
                    else:
                        print("You are detected by the pirates and have to fight your way out. You rescue the captives but take some damage.")
                        health -= 20
                        break
                elif choice == "2":
                    print("You decide to fight the pirates head-on to rescue the captives.")
                    # mini-game: combat section
                    if mini_game_combat():
                        print("You successfully defeat the pirates and rescue the captives.")
                        break
                    else:
                        print("You are overwhelmed by the pirates and have to retreat. You take some damage and fail the mission.")
                        health -= 50
                        return_ship()
                        backFromPlanet()
                        return
                elif choice == "3":
                    print("You decide to negotiate with the pirates to free the captives.")
                    # mini-game: negotiation section
                    if mini_game_negotiation():
                        print("You successfully negotiate with the pirates and free the captives.")
                        break
                    else:
                        print("The negotiations break down and you have to fight the pirates. You rescue the captives but take some damage.")
                        health -= 20
                        break
                else:
                    print("Invalid choice. Please choose a valid option.")
        
                    print("You make your way back to your ship with the rescued captives.")
                    print("Commander Smith is pleased with your success and rewards you with 75 credits.")
                  
                    inventory.append("research data")
                    return_ship()
        
        
        def steal_plans():
            cls()
            print("You arrive at the rendezvous point and are greeted by Captain Solo.")
            print("Captain Solo: I have a dangerous mission for you. We need you to infiltrate an Imperial facility and steal plans for a new weapon they're developing.")
            print("Captain Solo: The facility is heavily guarded, so you'll need to be stealthy and avoid detection. We've provided you with some equipment to help you out.")
            inventory.append("stealth suit")
            inventory.append("lockpick")
            print("Captain Solo: Good luck. Remember, the fate of the rebellion depends on your success.")
            time.sleep(5)
            cls()
            
            print("You arrive at the Imperial facility and activate your stealth suit. You sneak past the guards and reach the facility's computer room.")
            print("You use your lockpick to bypass the security system and access the computer.")
            print("As you search for the weapon plans, you hear footsteps approaching. It's only a matter of time before you're discovered.")
            
            # mini-game: hacking
            print("To hack into the computer system and find the weapon plans, you'll need to solve a series of puzzles. Are you ready to begin?")
            choice = input("Type 'yes' to begin or 'no' to decline: ")
            if choice.lower() == "yes":
                cls()
                print("You start the hacking simulation and are presented with a series of puzzles.")
                # generate random puzzles
                puzzle1 = random.randint(1, 10)
                puzzle2 = random.randint(1, 10)
                puzzle3 = random.randint(1, 10)
                # solve puzzles
                while True:
                    print(f"Puzzle 1: What is the square of {puzzle1}?")
                    answer1 = int(input("Answer: "))
                    if answer1 == puzzle1**2:
                        break
                    else:
                        print("Incorrect. Please try again.")
                while True:
                    print(f"Puzzle 2: What is the cube of {puzzle2}?")
                    answer2 = int(input("Answer: "))
                    if answer2 == puzzle2**3:
                        break
                    else:
                        print("Incorrect. Please try again.")
                while True:
                    print(f"Puzzle 3: What is the square root of {puzzle3**2}?")
                    answer3 = int(input("Answer: "))
                    if answer3 == puzzle3:
                        break
                    else:
                        print("Incorrect. Please try again.")
                print("Congratulations! You have successfully hacked into the computer system and found the weapon plans.")
                inventory.append("weapon plans")
                # escape
                print("You quickly gather the plans and make your escape. You sneak past the guards and make it back to your ship.")
                print("As you take off, you see the Imperial facility in the distance. You've completed your mission and helped the rebellion.")
                return_ship()
                backFromPlanet()
            else:
                print("You decline the hacking simulation. You'll have to find another way to get the weapon plans.")
                print("You quickly gather the plans and make your escape. You sneak past the guards and make it back to your ship.")
                print("As you take off, you see the Imperial facility in the distance. You've completed your mission and helped the rebellion.")
                inventory.append("weapon plans")
                return_ship()
                backFromPlanet()
                
        
        def mini_game_stealth():
            print("You enter a dark canyon where the supply convoy is scheduled to pass through. You can see several Imperial vehicles moving in the distance, and you need to avoid detection to sabotage the convoy.")
            print("Your objective is to sneak past the Imperial guards and plant explosives on the supply vehicles.")
            print("You have three chances to successfully sabotage the convoy.")
            print("Rolling for stealth...")
            stealth_roll = random.randint(1, 20)
            print(f"Your stealth roll is {stealth_roll}.")
            if stealth_roll >= 15:
                print("You manage to sneak past the guards undetected and plant the explosives on the supply vehicles.")
                return True
            else:
                print("You are detected by the guards and have to fight your way out. You manage to plant the explosives, but take some damage.")
                global health
                health -= 20
                return False
        
       
        
        
        
        def mini_game_deception():
            print("You approach the Imperial guards and try to bluff your way past them.")
            print("Your objective is to convince the guards that you are an Imperial officer and have authorization to inspect the supply vehicles.")
            print("Rolling for deception...")
            deception_roll = random.randint(1, 20)
            print(f"Your deception roll is {deception_roll}.")
            if deception_roll >= 15:
                print("You successfully deceive the guards and are allowed to inspect the supply vehicles.")
                return True
            else:
                print("The guards see through your deception and become suspicious. You have to fight your way out, taking some damage in the process.")
                global health
                health -= 20
                return False
        
        
        def imperial_sabotage_mission():
            global money
            global health
            global inventory
            global weapons
            
            cls()
            print("Lieutenant Calrissian gives you the details of the mission: you are to sabotage an Imperial supply convoy that is transporting weapons and supplies to one of their bases. The convoy is scheduled to pass through a nearby canyon.")
            print("Lieutenant Calrissian: The Empire's control over this area is strong, so be prepared for resistance. I'll provide you with a map of the area and some equipment to assist you.")
            time.sleep(5)
            cls()
            print("As you approach the canyon, you see the Imperial convoy in the distance. It consists of several armored vehicles and is heavily guarded by Imperial soldiers. You will need to take out the guards and disable the vehicles without being detected.")
            
            while True:
                choice = input("How would you like to proceed? \n1. Use stealth to sneak up on the convoy and disable the vehicles one by one. \n2. Use deception to trick the Imperial soldiers into abandoning the convoy.\nChoice: ")
                if choice == "1":
                    print("You decide to use stealth to sneak up on the convoy and disable the vehicles one by one.")
                    # mini-game: stealth section
                    if mini_game_stealth():
                        print("You successfully sabotage the convoy and make your way back to base.")
                        break
                    else:
                        print("You are detected by the Imperial soldiers and have to fight your way out. You sabotage the convoy but take some damage.")
                        health -= 20
                        break
                        return
                elif choice == "2":
                    print("You decide to use deception to trick the Imperial soldiers into abandoning the convoy.")
                    # mini-game: negotiation section
                    if mini_game_deception():
                        print("You successfully trick the Imperial soldiers and sabotage the convoy.")
                        break
                    else:
                        print("The deception is discovered and you have to fight the Imperial soldiers. You sabotage the convoy but take some damage.")
                        health -= 20
                        break
                else:
                    print("Invalid choice. Please choose a valid option.")
        
            print("You make your way back to Lieutenant Calrissian's office and report your success.")
            inventory.append("explosives")
            return_ship()
            backFromPlanet()
        
        
        def rescue_rebel_prisoners():
            cls()
            print("You approach Sergeant Ruescott Melshi, who is standing outside the briefing room with a grave expression.")
            print("Sergeant Melshi: We have received intelligence that several rebel operatives are being held in an Imperial prison.")
            print("Sergeant Melshi: We need someone to infiltrate the prison and rescue the prisoners. It won't be easy, but we can't leave them to rot there.")
            print("Sergeant Melshi: We've gathered some information about the prison's layout and security systems. Study it carefully before you go in.")
            print("Sergeant Melshi hands you a datapad with the information.")
            time.sleep(10)
            cls()
            print("You arrive at the Imperial prison and begin to survey the area. You can see several guards patrolling the perimeter, and a high wall with barbed wire on top.")
            print("You study the datapad to find a way in. It looks like there's an air vent on the roof that leads directly to the cell block where the prisoners are being held.")
            print("You make your way to the roof of the prison and locate the air vent. It's a tight squeeze, but you manage to crawl inside.")
            print("The air vent leads you directly to the cell block. You can see the rebel prisoners in their cells, but there are guards posted at every corner of the room.")
            while True:
                choice = input("How would you like to proceed? \n1. Try to sneak past the guards and free the prisoners. \n2. Create a distraction to draw the guards away from the cell block. \n3. Take out the guards one by one.\nChoice: ")
                if choice == "1":
                    print("You attempt to sneak past the guards, but one of them spots you and raises the alarm. You're forced to fight your way through, and several guards are killed in the process.")
                    break
                elif choice == "2":
                    print("You create a distraction by setting off an explosion in a nearby hallway. The guards rush to investigate, giving you the opportunity to free the prisoners.")
                    break
                elif choice == "3":
                    print("You take out the guards one by one, using your stealth and combat skills to avoid detection. When all the guards are down, you free the prisoners and make your escape.")
                    break
            else:
                print("Invalid choice. Please choose a valid option.")
            print("You successfully free the rebel prisoners and make your way back to the rendezvous point. Sergeant Melshi is waiting for you there, a relieved expression on his face.")
            print("Sergeant Melshi: Good job. You've proven yourself to be a valuable asset to the Rebel Alliance. Here's your reward.")
            inventory.append("Imperial prison keycard")
            
            
            return_ship()
            backFromPlanet()

        
        
        # Action selection 1 mine for resource function
        
        def mineForResource(planetSelections):
            global money
            global health
            global inventory
            global weapons
            # Determines how long they selected mine for resources
            mined_resources = 0
            #Tier  resources
            #Maybe add some specific ores
            Tier1Resources = ["2 Coins!", "3 Coins!", "5 Coins!", "+2 HP Points!", "+3 HP Points!", "Tier 1 Planet Medallion!" ]
            Tier2Resources = ["9 Coins!", "Tier 2 Planet Medallion!", "+11 HP Points!", "13 Coins!", "+7 HP Points!", "8 Coins!"]
            MarsResources = ["9 Coins!", "Tier 2 Planet Medallion!", "+11 HP Points!", "13 Coins!", "+7 HP Points!", "8 Coins!", "Flora and Fauna"]
            Tier3Resources = ["18 Coins!", "Nustra's Key!", "+17 HP Points!", "20 Coins!", "17 Coins!", "+15 HP Points!"]
            if planetSelections == 1 or planetSelections == 2:
                x  = random.choice(Tier1Resources)
                if x == "2 Coins!":
                    money += 2 
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                elif x == "3 Coins!":
                    money += 3 
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                elif x == "5 Coins!":
                    money += 5
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                    
                #health option
                elif x == "+2 HP Points!":
                    health += 2
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1
                elif x == "+3 HP Points!":
                    health += 3
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1
                #Medalion option (dont know if this has any use yet)
                elif x == "Tier 1 Planet Medallion!":
                    print(x)
                    mined_resources += 1 
                    #note make inventory slot for medalion option
                    inventory.append("Tier_1_Medallion")
            elif planetSelections == 3:
                x = random.choice(MarsResources)
                if x == "Tier 2 Planet Medallion!":
                    print(x)
                    mined_resources += 1
                    inventory.append("Tier_2_Medallion")
                elif x == "9 Coins!":
                    money += 9
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1 

                elif x == "+11 HP Points!":
                    health += 11
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1 

                elif x == "13 Coins!":
                    money += 13
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1 

                elif x == "+7 HP Points!":
                    health += 7
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1 

                elif x == "8 Coins!":
                    money += 8
                    print("You received " + str(x))
                    print("You have " + str(money) + " coins")
                    mined_resources += 1
                    
                elif x == "Flora and Fauna":
                    inventory.append("samples")
                    print("You have received the rare Flora and Fauna!")
                    mined_resources += 1
            elif planetSelections == 4 or planetSelections == 5:
                x  = random.choice(Tier2Resources)
                if x == "Tier 2 Planet Medallion!":
                    print(x)
                    mined_resources += 1
                    inventory.append("Tier_2_Medallion")
                elif x == "9 Coins!":
                    money += 9
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1 

                elif x == "+11 HP Points!":
                    health += 11
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1 

                elif x == "13 Coins!":
                    money += 13
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1 

                elif x == "+7 HP Points!":
                    health += 7
                    print("You received " + str(x))
                    print("You have " + str(health))
                    mined_resources += 1 

                elif x == "8 Coins!":
                    money += 8
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1 

                    
            elif planetSelections == 6 or planetSelections == 7 or planetSelections == 8:
                x  = random.choice(Tier3Resources)
                if x == "Nustra's Key":
                    print(x)
                    mine_resources += 1
                    inventory.append("Nustra's_key")
                elif x == "18 Coins!":
                    money += 18
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                elif x == "+17 HP Points!":
                    health += 17
                    print("You received " + str(x))
                    print("You have " + str(health)+ " coins")
                    mined_resources += 1
                elif x == "20 Coins!":
                    money += 20
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                elif x == "17 Coins!":
                    money += 17
                    print("You received " + str(x))
                    print("You have " + str(money)+ " coins")
                    mined_resources += 1
                elif x == "+15 HP Points!":
                    health += 15
                    print("You received " + str(x))
                    print("You have " + str(health)+ " coins")
                    mined_resources += 1

        #Fight selection function
        def fightAliensNotBoss():
            global health
            global money
            global weapons 
            global inventory 
            global playerAttackPower
            hud_first = True
            #Tier 1 Enemies 
            enemiesTier1 = ["Klingon", "Zinger","Lickman","Limerick","Bruxton"]
            enemyTier1 = random.choice(enemiesTier1)
            enemyTier1PlanetsBosses = ["Schlonk", "Blinker"]
            enemyTier1HitPts = random.randrange(2,9)
            enemyTier1BOSSpts = 10
            
            #Tier 2 Enemies 
            enemiesTier2 = ["Binky", "Bloop", "Yoink", "Ranjon"]
            enemyTier2 = random.choice(enemiesTier2)
            enemyTier2PlanetsBosses = ["Slanky", "Cloud Head", "Sloinker"]
            enemyTier2HitPts = random.randint(10,49)
            enemyTier2BOSSpts = 50
            
            #Tier 3 Enemies 
            enemiesTier3 = ["Obelus", "Cleek", "Zorg","Borg","Jarock"]
            enemyTier3 = random.choice(enemiesTier3)
            enemyTier3PlanetsBosses = ["Poseinep", "Plotanuwa", "Nustra, Destroyer of " + name]
            enemyTier3HitPts = random.randint(50,99)
            enemyTier3BOSSpts = 100
            
            #enemy weaknesses
            MercuryAlienWeakness = 1
            VenusAlienWeakness = 2
            MarsAlienWeakness = 3
            JupiterAlienWeakness = 4
            SaturnAlienWeakness = 5
            UranusAlienWeakness = 6
            PlutoAlienWeakness = 7
            NeptuneAlienWeakness = 8
            #fighting apsect of game
            #first tier fighting
            #Try and add a constant hud at the very top of the screen, i think that makes sense
            #maybe add a feature that theres a chance the enemy might miss the shot
            #Also maybe add our equipment system
            criticalHit = playerAttackPower * 1.3
            cls()
            if equipped_weapon == None: 
                print("You have not selected a weapon to equip, please do.")
                playerAttackPower = equip_weapon()
            else:
                pick_inventory = universal_input("Would you like to change your inventory? (Y/N) " "y","Y","n","N", error_message = "That's not an option, pick Y/N")
                if pick_inventory.upper() == "Y":
                    equiporunequip()
                elif pick_invetory.upper() == "N":
                    pass
            if planetSelection == 1 or planetSelection == 2  :
                enemyFightTier1 = random.choice(enemiesTier1)
                if enemiesTier1 in discovered:
                    pass
                else:
                    discovered.append(enemiesTier1)
                hud()
                print(enemyFightTier1 + ": You will now reach Your demise!")
                while health != 0 or enemyTier1HitPts != 0 :
                    fightInput = universal_input("Where do you want to shoot " + enemyFightTier1 + "?\n1. Foot 2. Leg 3. Waist 4. Torso 5. Chest 6. Shoulder 7. Head\n", 1,2,3,4,5,6,7, error_message = "God Dammit Pilot thats not a place to shoot! Try again.")
                    #mercury crit 
                    if fightInput == planetSelection:

                        enemyTier1HitPts -= criticalHit
                        cls()
                        hud()
                        print("You did "+ str(criticalHit) + " critical health damage points to (to the foot) " + enemyFightTier1 + "\nHe now has " + str(enemyTier1HitPts) +  " hp left!")
                        DamageToPlayer = 2
                        health -= DamageToPlayer
                        print(enemyFightTier1 +" did " + str(DamageToPlayer) + "!")
                    else: 
                        damageToEnemy = playerAttackPower
                        enemyTier1HitPts = enemyTier1HitPts - damageToEnemy
                        cls()
                        hud()
                        print("You did " + str(damageToEnemy) + " (not critical) to " + enemyFightTier1 + "!  \nHe now has " + str(enemyTier1HitPts) + " hp left.")
                        DamageToPlayer = random.randint(1,4)
                        print(enemyFightTier1 + " hit and did " + str(DamageToPlayer) + " damage to you!")
                        health -= DamageToPlayer
                    if health <= 0:
                        game_over_screen()
                        break
                    if enemyTier1HitPts <= 0:
                        newCoins = random.randint(1,9)
                        money += newCoins
                        print("You killed " + enemyFightTier1 + "! and gained " +  str(newCoins) + " coin(s)! ")
                        enemyTier1HitPts = random.randint(1,10)
                        break
            #Tier 2 planets
            elif planetSelection == 3 or planetSelection == 4 or planetSelection == 5:
                    enemyFightTier2 = random.choice(enemiesTier2)
                    if enemiesTier2 in discovered:
                        pass
                    else:
                        discovered.append(enemiesTier2)
                    hud()
                    print(enemyFightTier2 + ": You will now reach Your demise!")
                    while health != 0 or enemyTier2HitPts != 0 :
                        fightInput = universal_input("Where do you want to shoot " + enemyFightTier2 + "?\n1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head\n", 1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again.")
                        if fightInput == planetSelection:
                            enemyTier2HitPts -= criticalHit
                            cls()
                            hud()
                            print("You did " + str(criticalHit) + " critical health damage points to (to the foot) " + enemyFightTier2 + "\nHe now has " + str(enemyTier2HitPts) +  " hp left!")
                            DamageToPlayer = 2
                            health -= DamageToPlayer
                            print(enemyFightTier2 +" did " + str(DamageToPlayer) + "!")
                        else: 
                            damageToEnemy = playerAttackPower 
                            enemyTier2HitPts = enemyTier2HitPts - playerAttackPower 
                            cls()
                            hud()
                            print("You did " + str(damageToEnemy) + " (not critical) to " + enemyFightTier2 + "!  \nHe now has " + str(enemyTier2HitPts) + " hp left.")
                            DamageToPlayer = random.randint(10,22)
                            print(enemyFightTier2 + " hit and did " + str(DamageToPlayer) + " damage to you!")
                            health -= DamageToPlayer
                        if health <= 0:
                            game_over_screen()
                            break
                        if enemyTier2HitPts <= 0:
                            newCoins = random.randint(1,9)
                            money += newCoins
                            print("You killed " + enemyFightTier2 + "! and gained " +  str(newCoins) + " coin(s)! ")
                            enemyTier2HitPts = random.randint(14,28)
                            break
            #Tier 3 planets
            elif planetSelection == 6 or planetSelection == 7 or planetSelection == 8:
                    enemyFightTier3 = random.choice(enemiesTier3)
                    if enemiesTier3 in discovered:
                        pass
                    else:
                        discovered.append(enemiesTier3)
                    hud()
                    print(enemyFightTier3 + ": You will now reach Your demise!")
                    while health != 0 or enemyTier3HitPts != 0 :
                        fightInput = universal_input("Where do you want to shoot " + enemyFightTier3 + "?\n1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head\n", 1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again.")
                        if fightInput == planetSelection:
                            enemyTier3HitPts -= criticalHit 
                            cls()
                            hud()
                            print("You did " + str(criticalHit) + " critical health damage points to (to the foot) " + enemyFightTier3 + "\nHe now has " + str(enemyTier3HitPts) +  " hp left!")
                            DamageToPlayer = 2
                            health -= damageToPlayer
                            print(enemyFightTier3 +" did " + str(DamageToPlayer) + "!")
                        else: 
                            damageToEnemy = playerAttackPower 
                            enemyTier3HitPts = enemyTier3HitPts - playerAttacPower 
                            cls()
                            hud()
                            print("You did " + str(damageToEnemy) + " (not critical) to " + enemyFightTier3 + "!  \nHe now has " + str(enemyTier3HitPts) + " hp left.")
                            DamageToPlayer = random.randint(13,55)
                            print(enemyFightTier3 + " hit and did " + str(DamageToPlayer) + " damage to you!")
                            health -= DamageToPlayer
                        if health <= 0:
                            game_over_screen()
                            break
                        if enemyTier3HitPts <= 0:
                            newCoins = random.randint(1,9)
                            money += newCoins
                            print("You killed " + enemyFightTier3 + "! and gained " +  str(newCoins) + " coin(s)! ")
                            enemyTier3HitPts = random.randint(30,50)
                            break
        
        
        def bossFightNotFinal():
            print("You have chosen to Fight the Planetary Boss. . .\n")
            if equipped_weapon == None: 
                print("You have not selected a weapon to equip, please do.")
                playerAttackPower = equip_weapon()
            else:
                pick_inventory = universal_input("Would you like to change your inventory? (Y/N) " "y","Y","n","N", error_message = "That's not an option, pick Y/N")
                if pick_inventory.upper() == "Y":
                    equiporunequip()
                elif pick_invetory.upper() == "N":
                    pass
            global health
            global money
            global weapons 
            global inventory 
            hud_first = True
            Tier_1_Boss_Health = 10 
            Tier_2_Boss_Health = 40
            def boss_hud(bossHealth, playerHealth):
                print("~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~~=_-_=~")
                print("|\t  " + boss +"'s Health: " + str(bossHealth) + "HP             |     " + name + "'s:  " + str(health) +" HP                        |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
                print("|                                            |                                           |")
            
            
          
            
            if planetSelection == 1:
                #playerAttackPower = 0
                boss = "Schlonk"
                discovered.append("Schlonk")
                cls()
                schlonkHealth = 30
                schlonk = "Schlonk"
                schlonk_attacks = ["Charge", "Energy Blast", "Armor Plating", "Shockwave"]
                bossEventStarted = False
                schlonkAttackPower = 10
                
                # Function to handle the boss event
                def checkBossEvent():
                    if schlonkHealth <=  15 and not bossEventStarted:
                        return True
                    else:
                        return False
                def startBossEvent():
                    bossEventStarted = True
                    schlonk_attacks.append("Mega Charge")
                    schlonkAttackPower = 20
                    print("Schlonk: You cannot hope to defeat me! My power is beyond your comprehension!")
                
                # Game loop
                
                while True:
                    # Check if boss event should start
                    if checkBossEvent():
                        startBossEvent()
                
                    # Player attack
                    playerAttackBoss = universal_input("\nWhere do you want to strike Schlonk?\n 1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head ",1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 4:
                        #Critical 
                        schlonkHealth -= playerAttackPower
                        cls()
                        boss_hud(schlonkHealth, health)
                        print(name + " hit Schlonk's torso, dealing "  + str(playerAttackPower) + " critical damage!")
                    else:
                        sdd = playerAttackPower * .9
                        schlonkHealth -= playerAttackPower + 2
                        cls()
                        boss_hud(schlonkHealth, health)
                        print(name + " hit Schlonk, dealing"  + str(sdd) + " not critical damage!")
                        
                
                    # Choose a random attack from the list
                    if not bossEventStarted:
                        schlonkAttackPower = 10
                    sch = random.choice(schlonk_attacks)
                
                    # Schlonk's attacks
                    randomMissR = random.randint(1, 4)
                    if sch == "Charge" :
                        health -= 0.5 * schlonkAttackPower
                        print("Schlonk charged into you, dealing " + str(0.5*schlonkAttackPower) + " damage!")
                        
                    elif sch == "Energy Blast" :
                        health -= schlonkAttackPower
                        print("Schlonk shot an energy blast from its eyes, dealing " + str(schlonkAttackPower) + " damage!")
                        
                        
                    elif sch == "Armor Plating" :
                        
                        schlonkHealth += 4
                        print("Schlonk's armor plating absorbed some of the damage and restored 4 health!")
                        
                        
                    elif sch == "Shockwave"  :
                        
                        health -= 0.75 
                        print("Schlonk released a shockwave, dealing " + str(0.75*schlonkAttackPower) + " damage!")
                        
                        
                    elif sch == "Mega Charge" :
                        
                        health -= 0.8 * schlonkAttackPower
                        print("Schlonk charged with an incredible force, dealing " + str(0.8*schlonkAttackPower) + " damage!")
                        
                
                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Schlonk.")
                        game_over_screen()
                        break
                    elif schlonkHealth <= 0:
                        print("You have defeated Schlonk, Congratulations!")
                        break
                    
                #Blinkers boss fight    
            elif planetSelection == 2:
                boss = "Blinker"
                discovered.append("Blinker")
                #global bossEventStarted
                global blinker_attacks
                global blinkerAttackPower
                blinkerHealth = 15
                blinker = "Blinker"
                blinkerHealth = 15
                blinker_attacks = ["Teleport Spike", "Thunderbolt Whip", "Lightning Strike", "Spike Shield"]
                bossEventStarted = False
                blinkerAttackPower = 10
                def checkBossEvent():
                    if blinkerHealth <=  7 and not bossEventStarted:
                        return True
                    else:
                        return False
                        
                #global is so weird
                # Function to handle the boss event
                def startBossEvent():
                    bossEventStarted = True
                    blinker_attacks.append("Electric Shockwave")
                    blinkerAttackPower = 20
                    print("Blinker: You have no idea what you're dealing with. Behold, my true power!")
                
                # Game loop
                while True:
                    # Check if boss event should start
                    
                    if checkBossEvent():
                        startBossEvent()
                    # Player attack
                    playerAttackBoss = universal_input("\nWhere do you want to strike Blinker?\n 1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head" ,1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 4:
                        blinkerHealth -= playerAttackPower 
                        cls()
                        boss_hud(blinkerHealth, health)
                        print(name + " hit Blinker's torso, dealing" + str(playerAttackPower) + " critical damage!")
                    else:
                        damageDone = playerAttackPower - 2 
                        blinkerHealth -= playerAttackPower + 2  
                        cls()
                        boss_hud(blinkerHealth, health)
                        print(name + " hit Blinker, dealing " + str(damageDone) + " not critical damage!")
                       
                        
                
                    # Choose a random attack from the list
                    if not bossEventStarted:
                        blinkerAttackPower = 10
                    blink = random.choice(blinker_attacks)
                
                    # Blinker's attacks
                    randomMissR = random.randint(1, 4)
                    if blink == "Teleport Spike" :
                        health *= 0.75
                        boss_hud(blinkerHealth, health)
                        print("Blinker impaled you with its Teleport Spike, dealing 25% damage!")
                    elif blink == "Thunderbolt Whip" :
                        health *= 0.90
                        boss_hud(blinkerHealth, health)
                        print("Blinker knocked you back with its Thunderbolt Whip, dealing 10% damage!")
                    elif blink == "Lightning Strike" :
                        health *= 0.80
                        boss_hud(blinkerHealth, health)
                        print("Blinker hit you with a Lightning Strike, dealing 20% damage!")
                    elif blink == "Spike Shield"  :
                        blinkerHealth += 4
                        boss_hud(blinkerHealth, health)
                        print("Blinker curled up into a Spike Shield, restoring 4 health!")
                    elif blink == "Electric Shockwave" :
                        damage = blinkerAttackPower * 3
                        health -= damage
                        boss_hud(blinkerHealth, health)
                        print("Blinker released an Electric Shockwave, doing " + str(damage) + " damage!")

                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Blinker.")
                        game_over_screen()
                        break
                    elif blinkerHealth <= 0:
                        print("You have defeated Blinker, Congratulations!")
                        break

            elif planetSelection == 3:
                boss = "Slanky"
                discovered.append("Slanky")
                slankyHealth = 1
                while True:
                    print("Slanky: You may have courage, but it will not save you. You are nothing compared to my might. Prepare to face my wrath!")
                    playerAttackBoss = universal_input("\nWhere do you want to shoot Slanky?\n1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head\n",1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        schlonkHealth -= playerAttackPower
                        cls()
                        boss_hud(slankyHealth, health)
                        print(name + " did 5 critical damage to Slanky!")
                    else:
                        schlonkHealth -= playerAttackPower + 2 
                        cls()
                        boss_hud(slankyHealth, health)
                        print(name + " did 3 (non critical) damage to Slanky!")
                print("Slanky: ")
                Slanky_attacks = ["Tentacle-Slap", "Poison Gas Cloud", "Skin Resistant", "Cosmic Wave"]
                sla = random.choice(Slanky_attacks)
                randomMiss = [1,1,1,2]
                randomMissR = random.choice(randomMiss)

            elif planetSelection == 4:
                boss = "Cloud Head"
                discovered.append("Cloud Head")
                global ClobossEventStarted
                global cloudHead_attacks
                global cloudHeadAttackPower
                ClobossEventStarted = False
                cloudHeadHealth = 100
                cloudHead_attacks = ["Lightning Storm", "Energy Bolt", "Gas Blast", "Maze Shift"]
                
                
                # Function to check if the boss event should start
                def checkBossEvent():
                    if cloudHeadHealth <= 50 and not ClobossEventStarted:
                        return True
                    else:
                        return False
                
                # Function to handle the boss event
                def startBossEvent():
                    bossEventStarted = True
                    cloudHead_attacks.append("Super Energy Bolt")
                    cloudHeadAttackPower = 20
                    print("Cloud Head: You underestimate my power! Witness the true might of a cosmic being!")
                
                # Game loop
                while True:
                    # Check if boss event should start
                    playerAttackBoss = universal_input("\nWhere do you want to shoot Cloud Head?\n1.Foot 2.Leg 3.Waist 4.Torso 5.Chest 6.Shoulder 7.Head\n",1,2,3,4,5,6,7, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        cloudHeadHealth -= playerAttackPower
                        cls()
                        boss_hud(cloudHeadHealth, health)
                        print(name + " did "  + str(playerAttackPower) + " critical damage to Cloud Head!")
                    else:
                        cloudHeadHealth -= playerAttackPower + 3 
                        cdd = playerAttackPower - 5
                        cls()
                        boss_hud(cloudHeadHealth, health)
                        print(name + " did " + str(cdd) + " (non critical) damage to Cloud Head!")
                    
                    # Choose a random attack from the list
                    if not ClobossEventStarted:
                        cloudHeadAttackPower = 10
                    attack = random.choice(cloudHead_attacks)
                    
                    if attack == "Lightning Storm":
                        damage = cloudHeadAttackPower * 2
                        health -= damage
                        print("Cloud Head summoned a lightning storm, doing " + str(damage) + " damage!")
                    elif attack == "Energy Bolt":
                        damage = cloudHeadAttackPower
                        health -= damage
                        print("Cloud Head fired an energy bolt, doing " + str(damage) + " damage!")
                    elif attack == "Gas Blast":
                        print("Cloud Head released a blast of gas, but it had no effect!")
                    elif attack == "Maze Shift":
                        print("Cloud Head shifted its maze-like interior, confusing " + name + "!")
                    elif attack == "Super Energy Bolt":
                        damage = cloudHeadAttackPower * 3
                        health -= damage
                        print("Cloud Head fired a SUPER energy bolt, doing " + str(damage) + " damage!")

                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Cloud Head.")
                        game_over_screen()
                        break
                    elif cloudHeadHealth <= 0:
                        print("You have defeated Cloud Head, Congratulations!")
                        break

            elif planetSelection == 5:
                boss = "Sloinker"
                discovered.append("Sloinker")
                global SlobossEventStarted
                global sloinker_attacks
                SlobossEventStarted = False
                sloinkerHealth = 150
                sloinker_attacks = ["Armored Charge", "Ground Pound", "Shockwave Punch", "Regenerate Armor"]
                
                # Function to check if the boss event should start
                def checkBossEvent():
                    if sloinkerHealth <= 75 and not SlobossEventStarted:
                        return True
                    else:
                        return False
                
                # Function to handle the boss event
                def startBossEvent():
                    global SlobossEventStarted
                    global sloinker_attacks
                    sloinker_attacks.append("Rampage")
                    print("Sloinker: You cannot defeat me puny human! Feel the power of my armored fists!")
                
                # Game loop
                while True:
                    # Check if boss event should start
                    if checkBossEvent():
                        startBossEvent()
                    
                    playerAttackBoss = universal_input("\nWhere do you want to attack Sloinker?\n1.Head 2.Arm 3.Leg 4.Torso\n",1,2,3,4, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        sloinkerHealth -= 10
                        cls()
                        boss_hud(sloinkerHealth, health)
                        print(name + " did 10 critical damage to Sloinker's head!")
                    else:
                        sloinkerHealth -= 5
                        cls()
                        boss_hud(sloinkerHealth, health)
                        print(name + " did 5 (non critical) damage to Sloinker's " + ["arm", "leg", "torso"][playerAttackBoss-2] + "!")
                    
                    # Choose a random attack from the list
                    if not SlobossEventStarted:
                        sloinkerAttackPower = 15
                    attack = random.choice(sloinker_attacks)
                    if attack == "Armored Charge":
                        damage = sloinkerAttackPower * 2
                        health -= damage
                        boss_hud(sloinkerHealth, health)
                        print("Sloinker charged at you with its armored fists, doing " + str(damage) + " damage!")
                    elif attack == "Ground Pound":
                        damage = sloinkerAttackPower
                        health -= damage
                        boss_hud(sloinkerHealth, health)
                        print("Sloinker pounded the ground, causing a shockwave that dealt " + str(damage) + " damage!")
                    elif attack == "Shockwave Punch":
                        damage = sloinkerAttackPower * 1.5
                        health -= damage
                        boss_hud(sloinkerHealth, health)
                        print("Sloinker punched you with a shockwave, dealing " + str(damage) + " damage!")
                    elif attack == "Regenerate Armor":
                        sloinkerHealth += 20
                        health -= damage
                        boss_hud(sloinkerHealth, health)
                        print("Sloinker regenerated its armored hide, restoring 20 health!")
                    elif attack == "Rampage":
                        damage = sloinkerAttackPower * 3
                        health -= damage
                        boss_hud(sloinkerHealth, health)
                        print("Sloinker went on a rampage, crushing everything in its path and dealing " + str(damage) + " damage!")
                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Sloinker.")
                        game_over_screen()
                        break
                    elif sloinkerHealth <= 0:
                        print("You have defeated Sloinker, Congratulations!")
                        break

            elif planetSelection == 6:
                boss = "Poseinuep"
                global PosbossEventStarted
                global poseinuep_attacks
                
                discovered.append("Poseinuep")

                # Game setup
                poseinuepHealth = 150
                poseinuep_attacks = ["Tentacle Slam", "Razor Teeth", "Toxic Spray", "Crushing Grip"]
                poseinuepAttackPower = 15
                PosbossEventStarted = False
                
                
                # Function to check if the boss event should start
                def checkBossEvent():
                    if poseinuepHealth <= 75 and not PosbossEventStarted:
                        return True
                    else:
                        return False
                
                # Function to handle the boss event
                def startBossEvent():
                    global PosbossEventStarted
                    global poseinuep_attacks
                    global poseinuepAttackPower
                    global poseinuep
                    poseinuep = "Poseinuep"
                    bossEventStarted = True
                    poseinuep_attacks.append("Crushing Bite")
                    poseinuepAttackPower = 25
                    print("Poseinuep: You are a puny creature. I will enjoy crushing you with my tentacles!")
                
                # Game loop
                while True:
                    #cls()
                    # Check if boss event should start
                    if checkBossEvent():
                        startBossEvent()
                    
                    playerAttackBoss = universal_input("\nWhere do you want to attack Poseinuep?\n1.Tentacle 2.Teeth 3.Eyes 4.Body\n",1,2,3,4, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        poseinuepHealth -= 5
                        cls()
                        #boss_hud(poseinuepHealth, health)
                        print(name + " dealt 5 critical damage to Poseinuep's tentacle!")
                    elif playerAttackBoss == 2:
                        poseinuepHealth -= 10
                        cls()
                        #boss_hud(poseinuepHealth, health)
                        print(name + " dealt 10 critical damage to Poseinuep's teeth!")
                    elif playerAttackBoss == 3:
                        poseinuepHealth -= 5
                        cls()
                        #boss_hud(poseinuepHealth, health)
                        print(name + " dealt 5 critical damage to Poseinuep's eyes!")
                    else:
                        poseinuepHealth -= 3
                        cls()
                        #boss_hud(poseinuepHealth, health)
                        print(name + " dealt 3 (non-critical) damage to Poseinuep's body!")
                    
                    # Choose a random attack from the list
                    if not PosbossEventStarted:
                        poseinuepAttackPower = 15
                    attack = random.choice(poseinuep_attacks)
                    if attack == "Tentacle Slam":
                        damage = poseinuepAttackPower * 2
                        health -= damage
                        boss_hud(poseinuepHealth, health)
                        print("Poseinuep used Tentacle Slam, dealing " + str(damage) + " damage!")
                    elif attack == "Razor Teeth":
                        damage = poseinuepAttackPower
                        health -= damage
                        boss_hud(poseinuepHealth, health)
                        print("Poseinuep used Razor Teeth, dealing " + str(damage) + " damage!")
                    elif attack == "Toxic Spray":
                        boss_hud(poseinuepHealth, health)
                        print("Poseinuep used Toxic Spray, but it had no effect!")
                    elif attack == "Crushing Grip":
                        damage = poseinuepAttackPower * 3
                        health -= damage
                        boss_hud(poseinuepHealth, health)
                        print("Poseinuep used Crushing Grip, dealing " + str(damage) + " damage!")
                    elif attack == "Crushing Bite":
                        damage = poseinuepAttackPower * 2
                        health -= damage
                        boss_hud(poseinuepHealth, health)
                        print("Poseinuep used Crushing Bite, dealing " + str(damage) + " damage!")

                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Poseinuep, Game over.")
                        game_over_screen()
                        break
                    elif poseinuepHealth <= 0:
                        print("You have defeated Poseinuep. Congratulations!")
                        break

            elif planetSelection == 7:
                boss = "Plotanuwa"
                discovered.append("Plotanuwa")
                global newbossEventStarted
                global plotanuwa_attacks
                global polotanuwaAttackPower
                plotanuwa = "Plotanuwa"
                plotanuwaHealth = 15
                plotanuwa_attacks = ["Energy Blast", "Gravity Field", "Phasing", "Matter Distortion"]
                
                # Boss event flag
                newbossEventStarted = False
                
                # Function to check if the boss event should start
                def checkBossEvent():
                    if plotanuwaHealth <= 7 and not newbossEventStarted:
                        return True
                    else:
                        return False
                
                # Function to handle the boss event
                def startBossEvent():
                    global newbossEventStarted
                    global plotanuwa_attacks
                    global plotanuwaAttackPower
                    bossEventStarted = True
                    plotanuwa_attacks.append("Reality Warp")
                    plotanuwaAttackPower = 20
                    print("Plotanuwa: Your perception of reality is about to change...")
                    
                #Reality warp
                # Reality warp
                def realityWarp():
                    global PlotplayerAttackBoss
                    global plotanuwaHealth
                    global health
                    global newbossEventStarted
                    print("Plotanuwa warps reality! You and Plotanuwa switch roles!")
                    temp = playerAttackBoss
                    PlotplayerAttackBoss = random.choice(plotanuwa_attacks)
                    plotanuwa_attacks.remove(PlotplayerAttackBoss)
                    plotanuwa_attacks.append(temp)
                    boss_hud(plotanuwaHealth, health)
                    # Player uses the boss's attacks to damage themselves
                    bossAttackPlayer = temp
                    if bossAttackPlayer == "Energy Blast":
                        cls()
                        damage = plotanuwaAttackPower
                        health -= damage
                        boss_hud(plotanuwaHealth, health)
                        print("You fired an energy blast, doing " + str(damage) + " damage to yourself!")
                    elif bossAttackPlayer == "Gravity Field":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("You created a gravity field, making it harder for you to move!")
                    elif bossAttackPlayer == "Phasing":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("You phased out of reality, dodging Plotanuwa's attack!")
                    elif bossAttackPlayer == "Matter Distortion":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("You distorted the matter around yourself, creating a random effect!")
                        effect = random.choice(["Heal", "Damage", "Speed Boost"])
                        if effect == "Heal":
                            heal = random.randint(5, 15)
                            health += heal
                            if health > max_health:
                                health = max_health
                            print("You gained " + str(heal) + " health!")
                        elif effect == "Damage":
                            damage = random.randint(5, 15)
                            health -= damage
                            boss_hud(plotanuwaHealth, health)
                            print("You took " + str(damage) + " damage!")
                        elif effect == "Speed Boost":
                            print("You gained a burst of speed, allowing you to act twice this turn!")
                            PlotplayerAttackBoss = universal_input("Where do you want to shoot Plotanuwa again?\n1.Body 2.Leg 3.Head\n",1,2,3, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                            if PlotplayerAttackBoss == 1:
                                plotanuwaHealth -= 5
                                print("You did 5 critical damage to Plotanuwa!")
                            else:
                                plotanuwaHealth -= 3
                                print("You did 3 (non critical) damage to Plotanuwa!")
                            boss_hud(plotanuwaHealth, health)
                    # Boss tries to avoid damage
                    if not newbossEventStarted:
                        plotanuwaAttackPower = 10
                    attack = random.choice(plotanuwa_attacks)
                    if attack == "Energy Blast":
                        cls()
                        damage = plotanuwaAttackPower
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa fired an energy blast, but missed!")
                    elif attack == "Gravity Field":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to create a gravity field, but failed!")
                    elif attack == "Phasing":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to phase out of reality, but failed!")
                    elif attack == "Matter Distortion":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to distort the matter around you, but failed!")
                    # Switch back to normal roles after a few turns
                    if random.random() < 0.2:
                        print("Reality snaps back into place!")
                        temp = playerAttackBoss
                        PlotplayerAttackBoss = bossAttackPlayer
                        bossAttackPlayer = temp
                        plotanuwa_attacks.remove(temp)
                        plotanuwa_attacks.append(bossAttackPlayer)
                        boss_hud(plotanuwaHealth, health)
                    # Boss tries to avoid damage
                    if not newbossEventStarted:
                        plotanuwaAttackPower = 10
                    attack = random.choice(plotanuwa_attacks)
                    if attack == "Energy Blast":
                        cls()
                        damage = plotanuwaAttackPower
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa fired an energy blast, but missed!")
                        realityWarp()
                    elif attack == "Gravity Field":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to create a gravity field, but failed!")
                    elif attack == "Phasing":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to phase out of reality, but failed!")
                    elif attack == "Matter Distortion":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa tried to distort the matter around you, but failed!")
                    # Switch back to normal roles after a few turns
                    if random.random() < 0.2:
                        print("Reality snaps back into place!")
                        temp = playerAttackBoss
                        PlotplayerAttackBoss = bossAttackPlayer
                        bossAttackPlayer = temp
                        plotanuwa_attacks.remove(temp)
                        plotanuwa_attacks.append(bossAttackPlayer)
                        boss_hud(plotanuwaHealth, health)
                
                
                # Game loop
                while True:
                    # Check if boss event should start
                    if checkBossEvent():
                        startBossEvent()
                    
                    playerAttackBoss = universal_input("\nWhere do you want to shoot Plotanuwa?\n1.Body 2.Leg 3.Head\n",1,2,3, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        plotanuwaHealth -= 5
                        print(name + " did 5 critical damage to Plotanuwa!")
                    else:
                        plotanuwaHealth -= 3
                        print(name + " did 3 (non critical) damage to Plotanuwa!")
                    
                    # Choose a random attack from the list
                    if not newbossEventStarted:
                        plotanuwaAttackPower = 10
                    attack = random.choice(plotanuwa_attacks)
                    
                    if attack == "Energy Blast":
                        cls()
                        damage = plotanuwaAttackPower
                        health -= damage
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa fired an energy blast, doing " + str(damage) + " damage!")
                    elif attack == "Gravity Field":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa created a gravity field, making it harder to move!")
                    elif attack == "Phasing":
                        cls()
                        boss_hud(plotanuwaHealth, health)
                        print("Plotanuwa phased out of reality, dodging " + name + "'s attack!")
                    elif attack == "Reality Warp":
                            realityWarp()    
                    elif attack == "Matter Distortion":
                        print("Plotanuwa distorted the matter around " + name + ", creating a random effect!")
                        effect = random.choice(["Heal", "Damage", "Speed Boost"])
                        if effect == "Heal":
                            heal = random.randint(5, 15)
                            health += heal
                            print(name + " gained " + str(heal) + " health!")
                        elif effect == "Damage":
                            damage = random.randint(5, 15)
                            health -= damage
                            boss_hud(plotanuwaHealth, health)
                            print(name + " took " + str(damage) + " damage!")
                        elif effect == "Speed Boost":
                            print(name + " gained a burst of speed, allowing them to act twice this turn!")
                            playerAttackBoss = universal_input("Where do you want to shoot Plotanuwa again?\n1.Body 2.Leg 3.Head\n",1,2,3, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                            if playerAttackBoss == 1:
                                plotanuwaHealth -= 5
                                print(name + " did 5 critical damage to Plotanuwa!")
                            else:
                                plotanuwaHealth -= 3   
                        
                        # Check if player or boss has won
                        if health <= 0:
                            print("You have been defeated by Plotanuwa.")
                            game_over_screen()
                            break
                        elif plotanuwaHealth <= 0:
                            print("You have defeated Plotanuwa, Congratulations!")
                            break    
                            
                   
                    
            #Nustra final boss
            elif planetSelection == 8:
                nustra = "Nustra"
                boss = "Nustra"
                global NustraEventStarted
                global nustra_attacks
                
                discovered.append("Nustra: You have made it this far, but your journey ends here. I will show you the true power of the cosmos!")
                print("")
                # Game setup
                nustraHealth = 500
                nustra_attacks = ["Fiery Breath", "Tail Whip", "Claw Swipe", "Dragon Roar"]
                nustraAttackPower = 25
                NustraEventStarted = False
                isRalphy = False
                
                # Function to check if the boss event should start
                def checkBossEvent():
                    if nustraHealth <= 250 and not NustraEventStarted:
                        return True
                    else:
                        return False
                
                # Function to handle the boss event
                def startBossEvent():
                    global NustraEventStarted
                    global nustra_attacks
                    global nustraAttackPower
                    global isRalphy
                    NustraEventStarted = True
                    nustra_attacks.append("Nova Blast")
                    nustraAttackPower = 50
                    isRalphy = False
                    #print("Nustra: You have made it this far, but your journey ends here. I will show you the true power of the cosmos!")
                
                # Function to handle Ralphy transformation
                def transformToRalphy():
                    global isRalphy
                    global nustra_attacks
                    
                    isRalphy = True
                     
                    nustra_attacks = ["Sales Pitch", "Item Throw", "Coffee Splash", "Discount Strike"]
                   
                    #nustraAttackPower = 10
                global ralphyAttacked
                ralphyAttacked  = False  
                #Player attack power ( will change) 
                #playerAttackPower = 30 
                
                # Game loop
                while True:
                    #cls()
                    # Check if boss event should start
                    if checkBossEvent():
                        startBossEvent()
                
                    # Check if Nustra should transform to Ralphy
                    if nustraHealth <= 250 and not isRalphy:
                        transformToRalphy()
                        nustra = "Ralphy"
                        print("Nustra: Hahaha, did you really think you could defeat me? I am Ralphy, the greatest merchant in the galaxy!")
                    # Player turn
                    playerAttackBoss = universal_input("\nWhere do you want to attack " + nustra + "?\n1.Head 2.Body 3.Tail\n",1,2,3, error_message = "God Dammit Pilot that's not a place to shoot! Try again")
                    if playerAttackBoss == 1:
                        nustraHealth -= playerAttackPower
                        
                        print(name + " dealt 10 critical damage to " +nustra + "'s head!")
                    elif playerAttackBoss == 2:
                        nustraHealth -= playerAttackPower + 2 
                        
                        print(name + " dealt 8 critical damage to "+ nustra + " 's body!")
                    else:
                        nustraHealth -= playerAttackPower + 4
                    
                        print(name + " dealt 6 critical damage to " + nustra + "'s tail!")
                
                    # Nustra/Ralphy turn
                    # Nustra/Ralphy turn
                    if not NustraEventStarted and not isRalphy:
                        attack = random.choice(nustra_attacks)
                        damage = nustraAttackPower
                        if attack == "Fiery Breath":
                            cls()
                            health -= damage
                            boss_hud(nustraHealth, health)
                            print(nustra + " used Fiery Breath, dealing " + str(damage) + " damage!")
                            
                            
                        elif attack == "Tail Whip":
                            cls()
                            health -= damage
                            boss_hud(nustraHealth, health)
                            print( nustra + " used Tail Whip, dealing " + str(damage) + " damage!")
                            
                            
                        elif attack == "Claw Swipe":
                            cls()
                            health -= damage
                            boss_hud(nustraHealth, health)
                            print(nustra + " used Claw Swipe, dealing " + str(damage) + " damage!")
                            
                            
                        else:
                            cls()
                            health -= damage
                            boss_hud(nustraHealth, health)
                            print(nustra + " used Dragon Roar, dealing " + str(damage) + " damage and decreasing your attack power!")
                            if playerAttackPower <=5:
                                pass
                            else:
                                playerAttackPower -= .95
                            
                    else:
                        if not ralphyAttacked:  # <-- check if Ralphy has attacked yet
                            print("Nustra: Hahaha, did you really think you could defeat me? I am Ralphy, the greatest merchant in the galaxy!")
                            ralphyAttacked = True
                        attack = random.choice(nustra_attacks)
                        
                        if attack == "Sales Pitch":
                            cls()
                            boss_hud(nustraHealth, health)
                            print("Ralphy used Sales Pitch, dealing no damage but decreasing your attack power!")
                            playerAttackPower -= 5
                            
                        elif attack == "Item Throw":
                            damage = nustraAttackPower
                            cls()
                            boss_hud(nustraHealth, health)
                            print("Ralphy used Item Throw, dealing " + str(damage) + " damage!")
                            health -= damage
                            
                        elif attack == "Coffee Splash":
                            cls()
                            boss_hud(nustraHealth, health)
                            print("Ralphy used Coffee Splash, stunning " + "name !")
                            if isRalphy:
                                if attack == "Sales Pitch":
                                    cls()
                                    boss_hud(nustraHealth, health)
                                    print("Ralphy used Sales Pitch, dealing no damage but decreasing your attack power!")
                                    playerAttackPower -= 5
                                    
                                if attack == "Item Throw":
                                    damage = nustraAttackPower
                                    cls()
                                    boss_hud(nustraHealth, health)
                                    print("Ralphy used Item Throw, dealing " + str(damage) + " damage!")
                                    health -= damage
                                    
                                if attack == "Discount Strike":
                                    damage *= 1.4
                                    health -= 2
                                    cls()
                                    boss_hud(nustraHealth, health)
                                    print("Ralphy did 2 damage and multiplied his attack power!")
                                
                            
                        elif attack == "Discount Strike":
                            nustraAttackPower *= 1.4
                            health -= 2
                            cls()
                            boss_hud(nustraHealth, health)
                            print("Ralphy did 2 damage and multiplied his attack power!")
                    # Check if player or boss has won
                    if health <= 0:
                        print("You have been defeated by Ralphy.")
                        game_over_screen()
                        break
                    elif nustraHealth <= 0:
                        print("You have defeated Ralphy, Congratulations!")
                        print("Winner winner chicken dinner!")
                        game_over_screen()
                        break   
                
        # On Planet
        def planetActivities():
            global money
            global inventory
            global health
            enemy_count = 0
            resource_count = 0
            hud_count = 1
            if planetSelection == 1:
                cls()
                print("You selected Mercury. \nMercury is a relatively stable planet, with it being the smallest planet. It inhabits some scarce resources that can provide useful to our home planet if extracted.")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 2:
                cls()
                print("You selected Venus. \nThe Venetian planet is extremely unbearable with unheard of temperatures with it being so close to the sun, not wearing the correct gear and not bringing the correct equipment can result in death.")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 3 :
                cls()
                print("You selected Mars. \nMars, The Red Planet or also known as the Martian Planet has severe dust storms that can impact electronic systems and cause irreparable damage, so that it is important that you prepare correctly")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 4 :
                cls()
                print("You selected Jupiter. \nThe Jovian Planet Jupiter is the largest planet in our solar system. Being primarily composed of gas and liquid rather than solid matter.")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 5 :
                cls()
                print("You selected Saturn. \nSaturn the second-largest in the Solar System, is also a gas giant like jupiter. Adorned with thousands of beautiful ringlets, Saturn is unique among the planets. It is not the only planet to have rings – made of chunks of ice and rock – but none are as spectacular or as complicated as Saturn's")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 6 :
                cls()
                print("You selected Uranus. \nUranus's job is to break rules and demolish established patterns or structures, creating sudden-even radical-change. Uranus always works in sudden ways, and is called the Great Awakener. ")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 7 :
                cls()
                print("You selected Pluto. \nPluto is a dwarf planet in the Kuiper belt.")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 8 :
                cls()
                print("You selected Neptune. \nNeptune is the farthest planet from the Sun and has a thick atmosphere that's similar in composition to Uranus. It has a deep blue color due to the presence of methane in its atmosphere. Neptune has at least 14 moons, with the largest being Triton, which is believed to be a captured object from the Kuiper Belt.")
                print("Sending spaceship for takeoff . . .")
                countdown(0, 0, 15) #0,0,15
                print("Landing!")
                print("")
                OnPlanet = True
            elif planetSelection == 9 and diplo_mission == True:
                OnPlanet = False
                diplomatic_mission()
            elif planetSelection == 10 and search_mission == True:
                OnPlanet = False
                search_and_rescue_mission()
                pass 
            elif planetSelection == 11 and imperial_plans == True:
                OnPlanet = False
                steal_plans()
            elif planetSelection == 12 and sabotage_supply == True:
                OnPlanet = False
                imperial_sabotage_mission()
                
            elif planetSelection == 13 and rescue_prisoners == True:
                pass
            elif planetSelection == 14 and secure_contract == True: 
                pass 
            elif planetSelection ==  15 and eliminate_rival == True:
                pass 
            elif planetSelection == 16 and smuggle_goods == True:
                pass 
            elif planetSelection == 17 and raid_convy == True:
                pass
            elif planetSelection == 18 and eliminate_pirate == True:
                pass
            elif planetSelection == 19 and steal_artifact == True:
                pass
            elif planetSelection == 20 and smuggle_contraband == True:
                pass 
            else: 
                print("Please pick a valid planet. Sending you back to the ship...")
                return_ship()
                backFromPlanet()
            while OnPlanet:
                if health <= 0:
                    break
                elif hud_count == 1:
                    hud()
                planet_actions = universal_input("\nNow brave competitor. What do you want to do? \n(Type number) 1.Explore for resources. 2.Fight enemies for money. 3.Return to ship\n4. Fight the planetary boss 5. View quests\n", 1,2,3,4,5, error_message = "That is not an action, please try again.")
                # Get resources option
                if planet_actions == 1:
                    cls()
                    hud_count += 1
                    hud()
                    print("You have chosen to explore for resources.\n")
                    # randomized choice of tier one rescource choice 
                    resource_count = resource_count + 1
                    rand_num = random.randint(3,7)
                    if resource_count >= 7 or resource_count == rand_num:
                        if planetSelection == 1:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Mercurial Weather-Flip IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 2:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Venetian Nuclear-Winter IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 3:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Martian Dust Storm IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 4:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " The Great Red Spot IS APPROACHING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 5:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Saturnian Ice Rain IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 6:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Uranian Acid Rain IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 7:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Plutonian Freeze-over IS HAPPENING!!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                        if planetSelection == 8:
                            cls()
                            print("Spacesuit: CAPTAIN " + name + " A Neptunian Diamond Rain IS HAPPENING!!!! \n WE ARE DIRECTING YOU BACK TO THE SHIP!")
                            return_ship()
                            backFromPlanet()
                            return_ship()
                            backFromPlanet()
                    mineForResource(planetSelection)
                elif planet_actions == 2:
                    print("You have chosen to Fight for resources... ")
                    enemy_count = enemy_count + 1
                    rand_numE = random.randint(4,7)
                    if enemy_count >= 7 or enemy_count == rand_numE:
                        pass # this is the boss fight 
                    fightAliensNotBoss()
        
                # Return ship option
                elif planet_actions == 3:
                    print("You have chosen to Return to Ship...")
                    OnPlanet = False
                    return_ship()
                    backFromPlanet()
                
                #fight planet boss option
                elif planet_actions == 4:
                    cls()
                    bossFightNotFinal()
                
                elif planet_actions == 5:
                    cls()
                    hud_count += 1
                    hud()
                    if not player.quests:
                        print("\nYour quest list is empty! Talk to your faction to accept one.")
                    else:
                        print("\nHere are your quests you little kid:")
                        for quest in player.quests:
                            print(quest["title"])
                            


        def return_ship():
                hud_count = 0
                print("Going back to the ship. . .")
                countdown(0, 0, 15) #0,0,20
                print("Entering Ship")
                countdown(0,0,3) #0,0,3
                print("Engaging Thrusters")
                countdown(0,0,5) #0,0,5
                print("Preparing for takeoff")
                countdown(0,0,10) #0,0,10
                print("Takeoff!")
                countdown(0,0,5) #0,0,5
                print("You are now back in orbit captain")

        def backFromPlanet():
            
            #cls()
            global inventory
            global money
            global health
            global discovered
            global count_pop1
            global count_pop2
            global t3_exist
            global t2_exist
            global t1_exist
            spaceship_disaster()
            print("Welcome back captain " + name)
            CockpitOption = universal_input("1. Talk to merchant, 2. Review the rulebook, 3. Go to a planet, 4. Explore the ship \n(Enter Number) ", "1","2","3","4", error_message = "That is not an option captain, try again.")

            if CockpitOption == "1":
                def change_shop_val_weapons():
                        num = 1
                        for i, each_list in enumerate(ralphs_shop):
                            for r, each_string in enumerate(each_list):
                                my_string1 = each_string
                                if i == 0:
                                    my_string2 = my_string1[0:4] + str(num) + my_string1[5:]
                                elif i == 1:
                                    my_string2 = my_string1[0:5] + str(num) + my_string1[6:]
                                else:
                                    if i == 2 and r == 0:
                                        my_string2 = my_string1[0:5] + str(num) + my_string1[6:]
                                    elif i == 2 and r == 2:
                                        my_string2 = my_string1[0:6] + str(num) + my_string1[8:]
                                    else:
                                        my_string2 = my_string1[0:6] + str(num) + my_string1[7:]
                                ralphs_shop[i][r] = my_string2
                                num +=1
                def find_num_weapons(shop_decision):
                    for i, each_list in enumerate(ralphs_shop):
                        for r, each_string in enumerate(each_list):
                            my_string1 = each_string
                            if str(shop_decision) in my_string1[3:]:
                                item = my_string1
                                return item
                                break
                def find_num_equipments(shop_decision):
                    for i, each_list in enumerate(ralphs_equipment_shop):
                        for r, each_string in enumerate(each_list):
                            my_string1 = each_string
                            if str(shop_decision) in my_string1[3:]:
                                item = my_string1
                                return item
                                break
                def buy_item(item):
                    global money
                    global inventory

                    # Extract the price and item number from the item string
                    price = int(item.split()[0].replace('$', ''))
                    item_num = int(item.split()[1].split(':')[0])

                    # Check if the user has enough money to buy the item
                    if money >= price:
                        # Subtract the price from the user's money
                        money -= price

                        # Add the name of the equipment to the user's inventory
                        equipment_name = item.split(':')[1].strip()
                        inventory.append({equipment_name})

                        # Remove the item from the shop list
                        tier = int((item_num-1) / 10)  # Extract the tier number from the item number
                        index = (item_num-1) % 10
                        ralphs_equipment_shop[tier].pop(index)

                        # Move the numbers of the items above it down by 1
                        for i in range(index, len(ralphs_equipment_shop[tier])):
                            ralphs_equipment_shop[tier][i] = ralphs_equipment_shop[tier][i].replace(str(i + 2), str(i + 1))

                        # Print a success message
                        print(f"You bought {equipment_name} for ${price}!")
                    else:
                        # Print an error message
                        print("You don't have enough money to buy that item.")
                merchantOption = universal_input("1: Equipment Shop | 2: Gun Shop | 3: Exit ", 1,2,3, error_message = "That is not an option to go to, please pick 1, 2 or 3")
                if merchantOption == 1:
                    cls()
                    #placeholder money
                    money = 50000
                    if count_pop1:
                        ralphs_equipment_shop = [equipmentsTier1, equipmentsTier2, equipmentsTier3]
                        countpop_1 = False
                    merchant_talk = True
                    print("\t\t\t\t\tMoney: " + str(money) + "\n")
                    print("You have chosen to go shop with the merchant")
                    print("Ralphy: Welcome back, ye old merchant is sellin.")
                    decision = universal_input("Ralphy: Would ye like to buy anything scallywag? (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                    if decision.upper() == "N":
                        print("Ralphy: I knew ye were useless anyway . . . SCRAM")
                        backFromPlanet()
                    elif decision.upper() == "Y":
                        print("Ralphy: Here's what's me sellin: \n")
                        def selling():
                            print("Tier 1 Equipment: " + str(ralphs_equipment_shop[0]))
                            print("Tier 2 Equipment: " + str(ralphs_equipment_shop[1]))
                            print("Tier 3 Equipment: " + str(ralphs_equipment_shop[2]))
                        selling()
                        while merchant_talk:
                            shop_decision = universal_input("\nRalphy: Type the number of the item ye want ye hag: ", 1,2,3,4,5,6,7,8,9,error_message = "Ralphy: That is not an item ")
                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_equipments(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                            buy_item(find_num_equipments(shop_decision))
                            equipment.sort()
                            print(equipment)
                            keep_talking = universal_input("Ralphy: Anything else? (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                            if keep_talking.upper() == "N":
                                merchant_talk = False
                                cls()
                                backFromPlanet()
                            else:
                                print("\t\t\t\t\tMoney: " + str(money) + "\n")
                                print(selling())
                elif merchantOption == 2:
                    cls()
                    #placeholder money
                    money = 50000
                    #This code only runs the first time around, we dont want to append everytime they go to the shop, and keep removing the starting weapon when it is already removed.
                    if count_pop2:
                        ralphs_shop = [weaponsTier1, weaponsTier2, weaponsTier3]
                        ralphs_shop[0].pop(starting_weapon - 1)
                        count_pop2 = False
                    merchant_talk = True
                    print("\t\t\t\t\tMoney: " + str(money) + "\n")
                    print("You have chosen to go shop with the merchant")
                    print("Ralphy: Welcome back, ye old merchant is sellin.")
                    decision = universal_input("Ralphy: Would ye like to buy anything scallywag? (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                    if decision.upper() == "N":
                        print("Ralphy: I knew ye were useless anyway . . . SCRAM")
                        backFromPlanet()
                    elif decision.upper() == "Y":
                        print("Ralphy: Here's what's me sellin: \n")
                        def selling():
                            print("Tier 1 Weapons: " + str(ralphs_shop[0]))
                            if t2_exist:
                                if not t3_exist and not t1_exist:
                                    pass
                                else:
                                    print("Tier 2 Weapons: " + str(ralphs_shop[1]))
                            if t3_exist:
                                if not t1_exist:
                                    pass
                                else:
                                    print("Tier 3 Weapons: " + str(ralphs_shop[2]))
                        change_shop_val_weapons()
                        selling()
                        while merchant_talk:
                            #gotta somehow fix universal input
                            shop_decision = universal_input("\nRalphy: Type the number of the item ye want ye hag: ", 1,2,3,4,5,6,7,8,9,error_message = "Ralphy: That is not an item ")
                            if shop_decision >= 1 and shop_decision <= 2:
                                if money < 50:
                                    print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                elif money >= 50:
                                    if shop_decision == 1:
                                        decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                        if decision_decision.upper() == "Y":
                                            money -= 50
                                            weapons.append(find_num_weapons(shop_decision)[3:])
                                            try:
                                                ralphs_shop[0].remove(find_num_weapons(shop_decision))
                                            except ValueError:
                                                try:
                                                    ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                except ValueError:
                                                    ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                            change_shop_val_weapons()
                                    elif shop_decision == 2:
                                        decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                        if decision_decision.upper() == "Y":
                                            money -= 50
                                            weapons.append(find_num_weapons(shop_decision)[3:])
                                            try:
                                                ralphs_shop[0].remove(find_num_weapons(shop_decision))
                                            except ValueError:
                                                try:
                                                    ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                except ValueError:
                                                    ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                            change_shop_val_weapons()
                                    else:
                                        decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                        if decision_decision.upper() == "Y":
                                            money -= 50
                                            weapons.append(find_num_weapons(shop_decision)[3:])
                                            try:
                                                ralphs_shop[0].remove(find_num_weapons(shop_decision))
                                            except ValueError:
                                                try:
                                                    ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                except ValueError:
                                                    ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                            change_shop_val_weapons()
                            elif shop_decision >= 3 and shop_decision <= 6:
                                if money < 200:
                                    print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                elif money >= 200:
                                    if shop_decision == 4:
                                        decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                        if decision_decision.upper() == "Y":
                                            money -= 200
                                            weapons.append(find_num_weapons(shop_decision)[4:])
                                            ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                            change_shop_val_weapons()
                                    elif shop_decision == 5:
                                        if money < 400:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 400
                                                weapons.append(find_num_weapons(shop_decision)[4:])
                                                ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                                    elif shop_decision == 6:
                                        if money < 550:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 550
                                                weapons.append(find_num_weapons(shop_decision)[4:])
                                                ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                                    else:
                                        if money < 750:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 750
                                                weapons.append(find_num_weapons(shop_decision)[4:])
                                                ralphs_shop[1].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                            elif shop_decision >= 7 and shop_decision <= 9:
                                if money < 900:
                                    print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                elif money >= 900:
                                    if shop_decision == 9:
                                        if money < 1500:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 1500
                                                weapons.append(find_num_weapons(shop_decision)[5:])
                                                ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                                    elif shop_decision == 8:
                                        if money < 1150:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 1150
                                                weapons.append(find_num_weapons(shop_decision)[5:])
                                                ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                                    else:
                                        if money < 900:
                                            print("Ralphy: Ye don't have the dabloons for that Scallywag")
                                        else:
                                            decision_decision = universal_input("Ralphy: Make yer decision matey " + find_num_weapons(shop_decision) + " (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                                            if decision_decision.upper() == "Y":
                                                money -= 900
                                                weapons.append(find_num_weapons(shop_decision)[4:])
                                                ralphs_shop[2].remove(find_num_weapons(shop_decision))
                                                change_shop_val_weapons()
                            weapons.sort()
                            print(weapons)
                            keep_talking = universal_input("Ralphy: Anything else? (Y/N) ", "y","n","Y","N", error_message = "Ralphy: That ain't an option ya dunce, I would tell you to leave but i need the money! Try again.")
                            if keep_talking.upper() == "N":
                                merchant_talk = False
                                backFromPlanet()
                            else:
                                if t1_exist:
                                    if len(ralphs_shop[0]) == 0:
                                        list_to_remove = ralphs_shop[0]
                                        ralphs_shop.remove(list_to_remove)
                                        t1_exist = False
                                if t2_exist:
                                    if not t3_exist and not t1_exist:
                                        pass
                                    elif len(ralphs_shop[1]) == 0:
                                        list_to_remove = ralphs_shop[1]
                                        ralphs_shop.remove(list_to_remove)
                                        t2_exist = False
                                if t3_exist:
                                    if not t1_exist:
                                        pass
                                    elif len(ralphs_shop[2]) == 0:
                                        list_to_remove = ralphs_shop[2]
                                        ralphs_shop.remove(list_to_remove)
                                        t3_exist = False
                                cls()
                                print("\t\t\t\t\tMoney: " + str(money) + "\n")
                                print(selling())
                elif merchantOption == 3:
                    cls()
                    backFromPlanet()
            elif CockpitOption == "2":
                def rules():
                    cls()
                    print("You have selected the rulebook.")
                    option = universal_input("There are four options.\n1: Bestiary\n2: Game Description\n3: Planet Descriptions\n4: Exit the Rulebook\n", 1,2,3,4, error_message = "That is not an option, choose again.")
                    while len(discovered) == 0 and option == 1:
                        print("You haven't discovered anything yet! Go kill some aliens pilot")
                        option = universal_input("There are four options.\n1: Bestiary\n2: Game Description\n3: Planet Descriptions\n4: Exit the Rulebook\n", 1,2,3,4, error_message = "That is not an option, choose again.")
                    if option == 1:
                        cls()
                        print("Here is all the discovered beasts you may have encountered on your mission to the lower planets.\n" + str(discovered))
                        bestiary_talk = True
                        while bestiary_talk:
                            print("")
                            response = universal_input("Would you like to learn more about one of these alien creatures Captain " + name + "? (Y/N) ", "y","Y","n","N", error_message = "That is not an option captain, choose again.")
                            if response.upper() == "Y":
                                choose = universal_input("Enter the name of the alien you would like to learn more about: ", "Klingon", "Zinger", "Lickman", "Limerick", "Bruxton", "Binky", "Bloop", "Yoink", "Ranjon", "Obelus", "Cleek", "Zorg", "Borg", "Jarock", "Schlonk", "Blinker", "Slanky", "Cloud Head", "Sloinker", "Poseinuep", "Plotanuwa", "Nustra", error_message = "That is not a currently discovered alien, please type again.")
                                print("")
                                if choose == "Klingon":
                                    print("The Klingon is a fearsome warrior from a far-off planet. They are known for their tough, ridged foreheads and aggressive behavior. These aliens are highly skilled in hand-to-hand combat and are armed with deadly weapons such as blasters and disruptors. They are fiercely loyal to their own kind and often engage in interstellar battles with rival factions.")
                                elif choose == "Zinger":
                                    print("The Zinger is a small, insectoid creature that resembles a bee. These aliens are highly aggressive and attack in swarms, using their sharp stingers to pierce through armor and skin. They are known for their ability to fly at high speeds and can quickly swarm their prey from all directions. The Zinger is often found in large hives, which can be difficult to destroy.")
                                elif choose == "Lickman":
                                    print("The Lickman is a grotesque creature that appears to be made entirely of slime and mucus. They have no discernible facial features and communicate through a series of gurgling noises. These aliens are highly adaptable and can squeeze through tight spaces, making them difficult to catch. They are capable of enveloping their prey and digesting them from the inside out.")
                                elif choose == "Limerick":
                                    print("The Limerick is a bipedal creature with long, tentacle-like arms and a gaping maw. They are highly aggressive and often hunt in packs. Their tentacles are capable of grabbing and crushing prey, while their powerful jaws can tear through metal and bone. The Limerick is known for its ability to camouflage itself, making it difficult to spot until it's too late.")
                                elif choose == "Bruxton":
                                    print("The Bruxton is a massive, reptilian creature with razor-sharp claws and teeth. They are highly territorial and will attack anything that enters their territory. The Bruxton is incredibly resilient and can survive in extreme environments, such as the vacuum of space or the depths of the ocean. They are also capable of regenerating lost limbs, making them incredibly difficult to kill.")
                                elif choose == "Binky":
                                    print("A small, yet ferocious creature with razor-sharp teeth and claws. Binky is covered in thick fur, allowing it to survive in the harshest of environments. It is known to be extremely territorial and will attack any perceived threats without hesitation. Binky's most dangerous feature is its ability to emit a powerful sonic blast from its mouth, which can disorient and incapacitate its prey.")
                                elif choose == "Bloop":
                                    print("A gelatinous creature that roams the galaxy consuming anything in its path. Bloop has no discernible features aside from its large, pulsating body. It can change shape and size at will, making it nearly impossible to capture or contain. Bloop's only weakness is its susceptibility to extreme heat, which can cause it to liquefy and disperse.")
                                elif choose == "Yoink":
                                    print("A bipedal reptilian creature with thick, armored skin and razor-sharp claws. Yoink is a master of stealth, able to blend into its surroundings and ambush its prey with lightning-fast strikes. It is also capable of regenerating lost limbs and can withstand incredible amounts of physical trauma. Yoink's only vulnerability is its sensitive eyes, which can be temporarily blinded by bright lights or sudden movements.")
                                elif choose == "Ranjon":
                                    print("A massive, insectoid creature that lives in the deepest corners of the galaxy. Ranjon has a thick exoskeleton and razor-sharp mandibles that it uses to tear apart its prey. It can also release a cloud of toxic gas from its abdomen, which can cause paralysis and even death in its victims. Ranjon is nearly impossible to kill, as its exoskeleton is resistant to most conventional weapons. Its only known weakness is a rare mineral found on a distant planet that can corrode its armor.")
                                elif choose == "Obelus":
                                    print("The Obelus are an elusive race of aliens that inhabit the remote corners of the galaxy. These creatures are extremely agile and intelligent, with an innate ability to manipulate energy. Their long, slender bodies are covered in a shimmering metallic sheen that can adapt to any environment. Their heads resemble a large, single eye, which they use to focus their energy beams. The Obelus are formidable opponents, able to teleport at will and phase through solid objects. They are also known for their cunning and deceptive tactics, often outwitting their opponents before delivering a fatal blow.")
                                elif choose == "Cleek":
                                    print("The Cleek are a race of humanoid creatures with long, spindly arms and legs. They are known for their incredible strength and agility, and are feared throughout the galaxy for their ferocity in battle. Their bodies are covered in a thick, leathery hide that can withstand even the most punishing attacks. The Cleek are also capable of emitting a high-pitched screech that can disorient their opponents and leave them vulnerable to attack. Despite their savage reputation, the Cleek are also highly intelligent and are renowned for their advanced technology.")
                                elif choose == "Zorg":
                                    print("The Zorg are a race of robotic beings that were created by a long-dead civilization. They are driven by a single, overriding purpose - to conquer and dominate. The Zorg are heavily armed and armored, with powerful energy weapons and impenetrable shields. They are also equipped with a vast array of sensors and advanced computing systems that allow them to analyze their opponents and devise the most efficient means of defeating them. The Zorg are relentless in their pursuit of their objectives and will stop at nothing to achieve their goals.")
                                elif choose == "Borg":
                                    print("The Borg are a race of cybernetic beings that are feared throughout the galaxy for their relentless pursuit of perfection. They assimilate other races and incorporate their biological and technological distinctiveness into their own collective consciousness. The Borg are a hive mind, with each individual connected to a vast network of other Borg drones. They are incredibly powerful and adaptable, able to regenerate from almost any injury and analyze and counter any attack. The Borg are a formidable opponent, and their ultimate goal is to assimilate all life in the galaxy into their collective.")
                                elif choose == "Jarock":
                                    print("The Jarock are a mysterious and enigmatic race of aliens that are seldom seen and even less understood. They are known for their ability to phase in and out of reality, appearing seemingly out of nowhere to strike their opponents and then disappearing just as quickly. Their bodies are covered in a shimmering, iridescent armor that is impervious to most weapons, and they are armed with a powerful energy lance that can vaporize their enemies in a single blast. Despite their fearsome reputation, little is known about the motivations or goals of the Jarock, and they remain a source of great mystery and speculation.")
                                elif choose == "Schlonk":
                                    print("Schlonk is a huge alien with amazing power and incredible strength. He is covered in thick, armored plating that makes it almost impervious to conventional weapons. Its main attack is a devastating charge that can level entire buildings and knock back anything in its path. In addition to its physical prowess, Schlonk is also able to shoot energy blasts from its eyes, making it a truly formidable opponent. The only hope of defeating this monster is with a coordinated attack from a skilled team of fighters.")
                                elif choose == "Blinker":
                                    print("Blinker is an elusive and dangerous alien boss that is notorious for its lightning-fast speed and deadly precision. Its body is covered in razor-sharp spikes that it can use to impale its enemies, and its long, whip-like tail is capable of delivering powerful strikes that can knock opponents off their feet. Blinker also possesses the ability to teleport short distances, allowing it to quickly close the gap between itself and its prey. To defeat Blinker, one must be prepared to move quickly and strike with deadly accuracy.")
                                elif choose == "Slanky":
                                    print("Slanky is a fearsome alien boss that can be found lurking in the depths of the darkest corners of the galaxy. With a towering height and thick, powerful tentacles, Slanky is a force to be reckoned with. Its skin is tough and resistant to most forms of attack, making it a formidable opponent for even the most skilled warriors. To make matters worse, Slanky can also release a cloud of poisonous gas, causing debilitating effects on its enemies.")
                                elif choose == "Cloud Head":
                                    print("Cloud Head is a massive, floating alien boss that is said to hail from the outer reaches of the universe. Its body is made up of swirling clouds of gas and dust, making it difficult to hit with traditional weapons. To defeat this otherworldly beast, a skilled warrior must navigate through its maze-like interior and strike at its weak points with precision. Beware though, as Cloud Head has the ability to summon powerful lightning storms and hurl bolts of energy at its foes.")
                                elif choose == "Sloinker":
                                    print("Sloinker is a monstrous alien boss that is notorious for its incredible strength and durability. Its thick, armored hide can deflect even the most powerful of weapons, and its massive fists can crush anything that stands in its way. Sloinker also has the ability to create shockwaves with a single punch, causing the ground to tremble and destabilizing its enemies. Only the bravest and most skilled warriors should attempt to face this fearsome foe.")
                                elif choose == "Poseinuep":
                                    print("A formidable creature from the far reaches of the galaxy, the Poseinuep is a hulking beast with massive tentacles and a mouth full of razor-sharp teeth. Its body is covered in a thick, scaly hide that is virtually impervious to all but the most powerful weapons. Its attacks are devastating, and it is known to be particularly fond of using its tentacles to crush its enemies into pulp. Those who dare to face the Poseinuep in battle must be prepared for a fight to the death.")
                                elif choose == "Plotanuwa":
                                    print("A mysterious and elusive creature, the Plotanuwa is a being of pure energy that can manipulate matter at will. It appears as a shimmering cloud of light that can move through solid objects and strike its enemies from any direction. Its attacks are unpredictable and can take many forms, from blasts of pure energy to crushing gravitational forces. It is said that the Plotanuwa is capable of altering the fabric of reality itself, and that those who face it must be prepared for the impossible.")
                                elif choose == "Nustra":
                                    print("A legendary creature feared throughout the galaxy, Nustra is a massive, dragon-like beast that is capable of destroying entire planets with its immense power. Its scales are harder than any known substance, and its fiery breath can incinerate entire armies in seconds. Legends say that Nustra was born in the heart of a supernova, and that it feeds on the energy of dying stars. Its power is virtually limitless, and it is said that only the most skilled warriors have any hope of surviving an encounter with this fearsome creature.")
                            else:
                                bestiary_talk = False
                                rules()
                    elif option == 2:
                        cls()
                        print("A space adventure game where players control a spaceship and have to explore different\nplanets, fight alien enemies, and upgrade their ship with new weapons and equipment.")
                        while True:
                            option_leave = universal_input("Exit? (Y/N) ", "Y", "y", "N", "n", error_message = "That is not an option, please try again")
                            if option_leave.upper() == "Y":
                                rules()
                    elif option == 3:
                        planet_talk = True
                        while planet_talk:
                            if "Tier_1_Medallion" in inventory and "Tier_2_Medallion" in inventory:
                                cls()
                                select = universal_input("Enter the number of the planet you would like to learn more about\n1. Mercury\n2. Venus\n3. Mars\n4. Jupiter\n5. Saturn\n6. Uranus\n7. Pluto\n8. Neptune\n9. Exit\n", 1,2,3,4,5,6,7,8,9, error_message = "That is not an option, please try and pick again.")
                                cls()
                                if select == 1:
                                    print("Mercury is the closest planet to the Sun, and as a result, it experiences some of the most extreme temperature variations in the solar system. During the day, surface temperatures can reach up to 800 degrees Fahrenheit, while at night, they can plummet to -290 degrees Fahrenheit. Despite its small size, Mercury is a fascinating planet with unique features, such as its heavily cratered surface and its lack of any substantial atmosphere. Scientists have also discovered evidence of water ice in some of the planet's permanently shadowed craters, which could potentially be a valuable resource for future space exploration.")
                                elif select == 2:
                                    print("Venus is often referred to as Earth's sister planet due to their similar size and proximity to the Sun. However, that's where the similarities end. Venus has a thick, toxic atmosphere made up of sulfuric acid clouds, and its surface is the hottest of any planet in the solar system, with temperatures reaching up to 870 degrees Fahrenheit. Despite these harsh conditions, Venus is still a subject of interest for scientists, as it may have had a much more habitable environment in the past, and it could potentially offer clues about the future of Earth's own atmosphere.")
                                elif select == 3:
                                    print("Mars is often referred to as the ""Red Planet"" due to its distinctive rust-colored appearance. It has a thin atmosphere and a dry, desert-like landscape, with towering volcanoes and deep canyons. Mars has long been a subject of fascination for scientists and space enthusiasts, as it is the most likely planet in the solar system to have once harbored life. Multiple missions to Mars have discovered evidence of liquid water on the planet's surface, and recent findings suggest that microbial life may still exist deep beneath the planet's rocky terrain.")
                                elif select == 4:
                                    print("Jupiter is the largest planet in the solar system, with a mass two and a half times greater than all of the other planets in the solar system combined. It is primarily composed of gas and has a turbulent atmosphere filled with violent storms, including the iconic Great Red Spot, a massive storm larger than the size of Earth. Jupiter also has a complex system of rings, similar to Saturn's, and it has dozens of moons, including the four largest known as the Galilean moons, which are some of the most fascinating objects in the solar system.")
                                elif select == 5:
                                    print("Saturn is best known for its spectacular system of rings, which are made up of countless particles of ice and rock. The planet itself is also visually striking, with its yellow-gold color and distinctive atmospheric bands. Saturn is the second-largest planet in the solar system and has a large collection of moons, with over 80 currently identified. Among these moons is Titan, the only moon in the solar system known to have a thick atmosphere, and Enceladus, which has a subsurface ocean that could potentially harbor microbial life.")
                                elif select == 6:
                                    print("Uranus is the seventh planet from the Sun and the third-largest planet in the solar system. It is an ice giant, meaning it is primarily composed of water, ammonia, and methane ices, and has a thin ring system and a collection of at least 27 known moons. Uranus is also unique in that its rotational axis is tilted almost 98 degrees, causing it to essentially roll along its orbit around the Sun. This causes extreme seasonal variations on the planet, with each season lasting approximately 21 years.")
                                elif select == 7:
                                    print("Pluto is a dwarf planet located in the Kuiper Belt, a region of icy objects beyond Neptune. It's the smallest and the only dwarf planet in the outer solar system. Pluto has five known moons, with the largest being Charon, which is about half the size of Pluto. Pluto has a varied surface, with icy mountains and a heart-shaped region known as Tombaugh Regio.")
                                elif select == 8:
                                    print("Neptune is the farthest planet from the Sun and has a thick atmosphere that's similar in composition to Uranus. It has a deep blue color due to the presence of methane in its atmosphere. Neptune has at least 14 moons, with the largest being Triton, which is believed to be a captured object from the Kuiper Belt.")
                                elif select == 9:
                                    rules()
                                choice = universal_input("\nWould you like to learn about another planet? (Y/N) ", "y","Y","n","N", error_message = "That is not an option, choose Y/N please.")
                                if choice.upper() == "Y":
                                    pass
                                if choice.upper() == "N":
                                    planet_talk = False
                                    rules()
                                #elif select == 9:
                            elif "Tier_1_Medallion" in inventory:
                                cls()
                                select = universal_input("Enter the number of the planet you would like to learn more about\n1. Mercury\n2. Venus\n3. Mars\n4. Jupiter\n5. Saturn\n6. Exit\n", 1,2,3,4,5,6, error_message = "That is not an option, please try again.")
                                cls()
                                if select == 1:
                                    print("Mercury is the closest planet to the Sun, and as a result, it experiences some of the most extreme temperature variations in the solar system. During the day, surface temperatures can reach up to 800 degrees Fahrenheit, while at night, they can plummet to -290 degrees Fahrenheit. Despite its small size, Mercury is a fascinating planet with unique features, such as its heavily cratered surface and its lack of any substantial atmosphere. Scientists have also discovered evidence of water ice in some of the planet's permanently shadowed craters, which could potentially be a valuable resource for future space exploration.")
                                elif select == 2:
                                    print("Venus is often referred to as Earth's sister planet due to their similar size and proximity to the Sun. However, that's where the similarities end. Venus has a thick, toxic atmosphere made up of sulfuric acid clouds, and its surface is the hottest of any planet in the solar system, with temperatures reaching up to 870 degrees Fahrenheit. Despite these harsh conditions, Venus is still a subject of interest for scientists, as it may have had a much more habitable environment in the past, and it could potentially offer clues about the future of Earth's own atmosphere.")
                                elif select == 3:
                                    print("Mars is often referred to as the ""Red Planet"" due to its distinctive rust-colored appearance. It has a thin atmosphere and a dry, desert-like landscape, with towering volcanoes and deep canyons. Mars has long been a subject of fascination for scientists and space enthusiasts, as it is the most likely planet in the solar system to have once harbored life. Multiple missions to Mars have discovered evidence of liquid water on the planet's surface, and recent findings suggest that microbial life may still exist deep beneath the planet's rocky terrain.")
                                elif select == 4:
                                    print("Jupiter is the largest planet in the solar system, with a mass two and a half times greater than all of the other planets in the solar system combined. It is primarily composed of gas and has a turbulent atmosphere filled with violent storms, including the iconic Great Red Spot, a massive storm larger than the size of Earth. Jupiter also has a complex system of rings, similar to Saturn's, and it has dozens of moons, including the four largest known as the Galilean moons, which are some of the most fascinating objects in the solar system.")
                                elif select == 5:
                                    print("Saturn is best known for its spectacular system of rings, which are made up of countless particles of ice and rock. The planet itself is also visually striking, with its yellow-gold color and distinctive atmospheric bands. Saturn is the second-largest planet in the solar system and has a large collection of moons, with over 80 currently identified. Among these moons is Titan, the only moon in the solar system known to have a thick atmosphere, and Enceladus, which has a subsurface ocean that could potentially harbor microbial life.")
                                elif select == 6:
                                    backFromPlanet()
                                choice = universal_input("\nWould you like to learn about another planet? (Y/N) ", "y","Y","n","N", error_message = "That is not an option, please type again.")
                                if choice.upper() == "Y":
                                    pass
                                if choice.upper() == "N":
                                    planet_talk = False
                                    rules()
                            else:
                                cls()
                                select = universal_input("Enter the number of the planet you would like to learn more about\n1. Mercury\n2. Venus\n3. Exit\n", 1,2,3, error_message = "That is not an option, please try again.")
                                cls()
                                if select == 1:
                                    print("Mercury is the closest planet to the Sun, and as a result, it experiences some of the most extreme temperature variations in the solar system. During the day, surface temperatures can reach up to 800 degrees Fahrenheit, while at night, they can plummet to -290 degrees Fahrenheit. Despite its small size, Mercury is a fascinating planet with unique features, such as its heavily cratered surface and its lack of any substantial atmosphere. Scientists have also discovered evidence of water ice in some of the planet's permanently shadowed craters, which could potentially be a valuable resource for future space exploration.")
                                elif select == 2:
                                    print("Venus is often referred to as Earth's sister planet due to their similar size and proximity to the Sun. However, that's where the similarities end. Venus has a thick, toxic atmosphere made up of sulfuric acid clouds, and its surface is the hottest of any planet in the solar system, with temperatures reaching up to 870 degrees Fahrenheit. Despite these harsh conditions, Venus is still a subject of interest for scientists, as it may have had a much more habitable environment in the past, and it could potentially offer clues about the future of Earth's own atmosphere.")
                                elif select == 3:
                                    backFromPlanet()
                                choice = universal_input("\nWould you like to learn about another planet? (Y/N) ", "y","Y","n","N", error_message = "That is not an option, choose Y/N please.")
                                if choice.upper() == "Y":
                                    pass
                                if choice.upper() == "N":
                                    planet_talk = False
                                    rules()
                    elif option == 4:
                        cls()
                        backFromPlanet()
                rules()                
            elif CockpitOption == "3":
                atPlanetActions(planetSelect())
                cls()
            elif CockpitOption == "4":
                while True:
                    cls()
                    exploreShip = universal_input("You have chosen to explore the ship\nPlease pick a room to go to:  1. Engine Room  |  2. Bridge  |  3. Medical Center\n 4. Cargo Bay  |  5. Meads's Hall  |  6. Galactic Hub  |  7. Exit\n ", "1","2","3","4","5","6","7",  error_message = "Captian are you dumb? I GAVE YOU 6 OPTIONS! PUT THE NUMBER YOU WANT TO GO TO!")
                    if exploreShip == "1":
                        def introduce_engineer():
                            """
                            Introduces the player to the ship's engineer, Kaelan Skye.
                            """
                            print("As you enter the engine room, you see a tall, lanky man hunched over a console, tapping away at the controls. He looks up as you approach, his piercing blue eyes meeting yours.")
                            print('"Ah, the captain," he says, his voice carrying a note of gruffness. "I\'m Kaelan Skye, the ship\'s engineer. What can I do for you?"')
                            print()
                            print("Kaelan stands up straight and stretches, cracking his knuckles. 'I've been working on these engines for years, and let me tell you, they're a finicky bunch. But I know them inside and out. If you need anything fixed or tweaked, just let me know.'")
                            print()
                            print('He gestures around the engine room. "This is where the magic happens, captain. The engines are the heart of the ship, and without them, we\'d be dead in the water. But with me in charge, you don\'t have to worry about a thing."')
                            print()
                            print('Kaelan chuckles to himself. "Of course, that\'s not to say that everything always goes smoothly. There\'s always some new problem to solve, some new challenge to overcome. But that\'s what makes it fun, right? And hey, if you ever need someone to talk shop with, I\'m always happy to oblige."')
                            print()
                            print("He goes back to his work, muttering under his breath as he starts to tweak the controls.")
    
                        def engine_room():
                            cls()
                            print("You enter the Engine Room.")
                            print("You see the ship's engines in front of you.")
                            while True: 
                                print("\nWhat would you like to do?")
                                print("1. Do maintenance on the engines.")
                                print("2. Solve a puzzle to fix a malfunctioning engine.")
                                print("3. Talk to the NPC engineer.")
                                print("4. Exit the room")
                                choice = universal_input("Enter your choice (1-4): ", "1","2","3","4", error_message = "Bro that  is not an option, please pick a number 1-4")
                                if choice == "1":
                                    cls()
                                    print("You spend some time doing maintenance on the engines.")
                                    print("The engines seem to be in good shape now.")
                                elif choice == "2":
                                    cls()
                                    print("You see that one of the engines is malfunctioning.")
                                    print("You need to solve a puzzle to fix it.")
                                    print("You see a panel with a bunch of wires connected to the engine.")
                                    print("The wires are labeled A, B, C, and D.")
                                    print("You need to connect the wires in the correct order to fix the engine.")
                                    print("Here are the clues:")
                                    print("1. A is next to B, but not next to C.")
                                    print("2. C is next to D, but not next to B.")
                                    print("3. D is not next to A or B.")
                                    # logic puzzle code
                                    connected_wires = ["", "", "", ""]
                                    while True:
                                        global money
                                        print("The current connections are:", connected_wires)
                                        choice = input("Enter a wire label to connect (A-D), or 'done' to finish: ")
                                        choice = choice.upper()
                                        if choice == "DONE":
                                            if connected_wires == ["B", "A", "D", "C"]:
                                                print("You have successfully fixed the engine! You gained 5 coins!")
                                                money += 5
                                                break
                                            else:
                                                print("The connections are incorrect. The engine is still malfunctioning.")
                                                break
                                        elif choice not in ["A", "B", "C", "D"]:
                                            print("Invalid choice. Please enter a wire label (A-D) or 'done'.")
                                        else:
                                            index = connected_wires.index("")
                                            connected_wires[index] = choice
                                # end of puzzle code
                                elif choice == "3":
                                    cls()
                                    introduce_engineer()
                                elif choice == "4":
                                    cls()
                                    break 
                        engine_room()
                    elif exploreShip == "2":
                        # Communications officer story function to provide more information to the player
                        def communications_officer_story():
                            print("You approach the Communications Officer and strike up a conversation.")
                            print("He introduces himself as Lt. Jaxon, the communications officer on this ship. You notice that he's fidgety and nervous.\n")
                            print("As you talk to him, you realize that he's actually a bit of a conspiracy theorist.")
                            print("He tells you that he's been picking up strange signals from deep space. He believes that there's a secret organization out there that's trying to control the galaxy, that is supposedly named RS. He also tells you that he's been trying to hack into the ship's communication system to try and uncover more information. He knows it's a sequence and the first 3 numbers are 0, 3 and 6 \n")
                            print("You're not sure if he's just paranoid or if there's some truth to what he's saying. Either way, Lt. Jaxon's quirky personality is certainly memorable.")
                        # Bridge implementation with piloting and hacking options, and NPC communications officer
    
                        def bridge():
                            cls()
                            print("You enter the Bridge.")
                            print("You see the ship's controls and navigation systems.")
                            while True:
                                global money
                                print("\nWhat would you like to do?")
                                print("1. Pilot the ship through an asteroid field.")
                                print("2. Solve a puzzle to hack into the ship's computer system.")
                                print("3. Talk to the Communications Officer.")
                                print("4. Exit the room")
                                choice = universal_input("Enter your choice (1-4): " , "1", "2", "3", "4", error_message = "How do you expect to win over the solar system if you can't even put in the right number in?")
                                if choice == "1":
                                    cls()
                                    print("You take the controls and expertly pilot the ship through the asteroid field.")
                                    print("You've successfully avoided any collisions and the ship is still intact.")
                                elif choice == "2":
                                    cls()
                                    print("You need to hack into the ship's computer system to gain access to some important information.")
                                    print("Here's the puzzle: you need to input the correct sequence of numbers to bypass the security system.")
                                    # hacking puzzle code
                                    number_sequence = input("Enter the correct sequence of numbers (talk to communications officer) : ")
                                    if number_sequence == "036912":
                                        print("You have successfully hacked into the ship's computer system, and gained 10 coins!")
                                        money += 10
                                    else:
                                        print("The security system is still blocking your access.")
                                    # end of puzzle code
                                elif choice == "3":
                                    cls()
                                    communications_officer_story()  # the communications_officer_story function
                                elif choice == "4":
                                    cls()
                                    break
                                    
                        bridge()    
                    elif exploreShip == "3":
                        def medical_center():
                            cls()
                            print("You enter the ship's medical center and see various medical equipment and supplies scattered throughout the room.")
                            print("You notice an injured crew member lying on a bed, groaning in pain.")
                                
                            # option to treat injured crew member
                            while True:
                                print("\nWhat would you like to do?")
                                print("1. Treat the injured crew member")
                                print("2. Talk to the ship's doctor")
                                print("3. Exit the room")
                             
                                choice = universal_input("Enter your choice: ", "1","2","3", error_message = "I swear I'm going to smack you captain if you keep putting\n the wrong damn numbers in!")
                                    
                                if choice == "1":
                                    cls()
                                    print("You approach the crew member and ask how they got injured.")
                                    print("After listening to their story, you assess the injury and determine that it is a simple fracture.")
                                    print("You retrieve a medical scanner and use it to confirm the diagnosis.")
                                    print("You then proceed to set the broken bone and wrap it with a cast.")
                                    print("The crew member thanks you for your help and you feel good knowing you were able to assist.")
                                elif choice == "2":
                                    def introduce_doctor():
                                        cls()
                                        """
                                        Introduces the player to the ship's doctor, Dr. Sarah Lawson, and sets up the Medical Center.
                                        """
                                        print("As you enter the Medical Center, you see a middle-aged woman in a white lab coat working at a medical console. She looks up and greets you with a smile.")
                                        print('"Hello there, Captain," she says. "I\'m Dr. Sarah Lawson, the ship\'s doctor. What brings you to my humble abode?"')
                                        print()
                                        print("Dr. Lawson stands up and walks over to you. 'As you can see, this is our medical center. We have everything we need here to keep our crew healthy and happy, from the latest diagnostic equipment to a well-stocked pharmacy. And if we don't have what we need, I can always whip something up in my lab.'")
                                        print()
                                        print('She looks around the room, pointing out various pieces of equipment. "We\'ve got the best medical facilities in the sector, Captain. But don\'t take my word for it - feel free to have a look around and see for yourself."')
                                        print()
                                        print('Dr. Lawson pauses, looking thoughtful. "You know, there was one time when we had an outbreak of a rare space disease on board. It was a real challenge, but we managed to contain it and find a cure. If you\'re ever interested in learning more about that experience, just let me know."')
                                    introduce_doctor()
                                elif choice == "3":
                                    cls()
                                    break
                        medical_center()
                    elif exploreShip == "4":
                        def cargo_bay():
                            cls()
                            print("You enter the Cargo Bay.")
                            print("There are rows of containers stacked high on either side of the room.")
                            print("As you start to look around, you see a Cargo Handler walking towards you.")
                            # NPC Cargo Handler
                            while True: 
                                print("Cargo Handler: Welcome to the Cargo Bay. Can I help you with something?")
                                print("\n1. Ask about the cargo")
                                print("2. Search for useful items")
                                print("3. Solve the puzzle to access a locked container")
                                print("4. Exit the cargo room.")
                                choice = universal_input("Please enter a number 1-4 ", "1","2","3","4", error_message = "Gosh dang it captain pick the right number to continue. ")
                                if choice == "1":
                                    cls()
                                    print("Cargo Handler: We have a variety of items stored in here, from food supplies to weapons.")
                                    print("If you need anything specific, feel free to ask.")
                                        
                                elif choice == "2":
                                    cls()
                                    print("You start to rummage through the containers.")
                                    print("After some searching, you find a few useful items.")
                                       # Add items to the player's inventory
                                    #player.add_item("medkit")
                                    # player.add_item("energy cell")

                                elif choice == "3":
                                    cls()
                                    print("You notice a locked container in the corner of the room.")
                                    print("There's a keypad on the side with a screen that reads: Enter the code to unlock the container.")
                                    print("You need to solve the puzzle to figure out the code.")
                                    # Puzzle to unlock the container
                                        
                                    answer = input("What is the smallest prime number with 3 digits?")
                                    if answer == "101":
                                        print("No, that's not it.")
                                    elif answer == "103":
                                        print("No, that's not it either.")
                                    elif answer == "107":
                                        print("No, that's still not it.")
                                    elif answer == "109":
                                        print("You hear a satisfying beep as the container unlocks.")
                                            
                                            # Add item to the player's inventory
                                            #player.add_item("laser gun")
                                            
                                    else:
                                        print("That's not a prime number with 3 digits. Try again.")
                                elif choice == "4":
                                    cls()
                                    break 
                        cargo_bay()
                    #Meads hall statement
                    elif exploreShip == "5":
                        def meads_hall():
                            cls()
                            #Introduce the user
                            print("Welcome to Meads's Hall, captain! This is where the crew comes to relax and eat. Let's see who's around today...\n")
                            #List of possible crew member names and their corresponding dialogue
                            crew_members = {
                                "Liam": ["Hey there, I'm Liam. Nice to meet you!", "Have you tried the meatloaf? It's pretty good today."],
                                "Sophie": ["Hi, I'm Sophie. What's up?", "I heard there's going to be a meteor shower tonight. Should be cool to see."],
                                "Jaxon": ["Yo, I'm Jaxon. You new here?", "I'm thinking of trying out the virtual reality simulator later. Want to join?"],
                                "Olivia": ["Hello, I'm Olivia. How can I help you?", "I heard there's a movie night tonight. Are you going to watch?"],
                                "Athan": ["Hey, I'm Athan. Nice to meet you.", "I'm pretty tired today. Just going to grab a coffee and take a nap."],
                            }
                            # randomly select a crew member to interact with
                            crew_member = random.choice(list(crew_members.keys()))
                            
                            print(f"You see {crew_member} sitting at a nearby table.")
                            print(f"{crew_members[crew_member][0]}")
                            print(f"{crew_members[crew_member][1]}")
                            
                            # offer some options for the player to choose from
                            while True:
                                print("\nWhat would you like to do?")
                                print("1. Grab some food")
                                print("2. Chat with the crew member")
                                print("3. Explore the hall")
                                print("4. Exit Meads Hall. ")
                                
                                choice = universal_input("> ", "1","2","3","4", error_message = "That is not a number 1-4, please try again.")
                                
                                # handle the player's choice
                                if choice == "1":
                                    cls()
                                    print("You enter the cafeteria and grab some food from the buffet table. You see a few crew members sitting at a nearby table. What do you do?")
                                    while True:
                                        choice = universal_input("1. Sit and eat with them\n2. Eat alone and observe\n3. Leave the cafeteria\n", 1,2,3, error_message = "That is not an option to take Captain, please try again.")
                                        if choice == "1":
                                            print("You sit down with the crew members and introduce yourself. They welcome you and start chatting with you. You learn about their roles on the ship and their personal interests. You enjoy a pleasant conversation and finish your meal.")
                                            break
                                        elif choice == "2":
                                            print("You decide to eat alone and observe the crew members. You notice how they interact with each other and learn more about their personalities. After finishing your meal, you leave the cafeteria feeling a bit more knowledgeable about your crewmates.")
                                            break
                                        elif choice == "3":
                                            print("You decide to leave the cafeteria without interacting with anyone. You finish your meal in silence and head back to your duties on the ship.")
                                            break

                                elif choice == "2":
                                    cls()
                                    print(f"You walk over to {crew_member}'s table and strike up a conversation.")
                                elif choice == "3":
                                    cls()
                                    print("You decide to take a walk around the hall.")
                                    options = ["You see a group of crew members playing a game and invite you to join.",
                                               "You overhear two crew members talking about a mysterious object they found on a recent planet.",
                                               "You find a lost item on the floor and try to find its owner.",
                                               "You see a crew member practicing a musical instrument and they offer to teach you.",
                                               "You stumble upon a secret stash of snacks hidden in a corner.",
                                               "You find a note left on a table with a cryptic message."]
                                
                                    option = random.choice(options)
                                    print(option)
                                    if option == options[0]:
                                        print("You spend some time playing the game with the crew members.")
                                    elif option == options[1]:
                                        print("You try to eavesdrop on their conversation without being noticed.")
                                    elif option == options[2]:
                                        print("You pick up the lost item and start asking around to find its owner.")
                                    elif option == options[3]:
                                        print("You spend some time learning how to play the musical instrument.")
                                    elif option == options[4]:
                                        print("You munch on the secret stash of snacks and feel a bit guilty for taking them.")
                                    elif option == options[5]:
                                        print("You try to decipher the cryptic message and wonder who left it.")
                                elif choice == "4":
                                    cls()
                                    break
                        meads_hall()
                        
                        
                        #2878 - 3369
                        
                    elif exploreShip =="6":
                        # check reupuation
                        def check_reputation():
                            print("Player reputation:")
                            for faction, reputation in player.reputation.items():
                                print(f" - {faction}: {reputation}")
                        #US Alliance function
                        def united_space_alliance():
                            print("One of the memebers approaches you and introduces themselves as Dr. Johnson, a member of the United Space Alliance.")
                            print("'Greetings, traveler! I couldn't help but notice your curious and adventurous spirit. Have you ever considered joining the United Space Alliance?'")
                            response = universal_input("Do you want to know more about the United Space Alliance? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                            if response.lower() == "y":
                                cls()
                                print("Dr. Johnson smiles and continues: 'The United Space Alliance is a faction that promotes exploration, science, and diplomacy. We believe that cooperation and understanding are the key to a better future for all sentient beings in the galaxy.'")
                                print("'We are always looking for talented and passionate individuals who share our vision. If you join us, you will have access to our resources, knowledge, and network. You will also be able to earn reputation with us by completing quests that involve scientific research, diplomacy, or peaceful exploration.'")
                                response2 = universal_input("Do you want to join the United Space Alliance? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if response2.lower() == "y":
                                    cls()
                                    print("'Excellent choice, my friend! Welcome to the United Space Alliance. I will provide you with a badge that identifies you as one of our members. You can access our base and resources anytime you want.'")
                                    player.faction = "United Space Alliance"
                                    player.reputation["United Space Alliance"] = 0
                                else:
                                    cls()
                                    print("'I understand. Joining a faction is a big decision, and not everyone is cut out for it. However, if you ever change your mind, don't hesitate to contact me.'")
                            else:
                                cls()
                                print("'I see. Well, if you ever change your mind, don't hesitate to contact me. The United Space Alliance is always open to new members who share our vision.'")
                        # Rebel Alliance function
                        def rebel_alliance():
                            print("A cloaked figure approaches you and whispers, 'Psst, you look like someone who could help us out. Have you ever heard of the Rebel Alliance?'")
                            response = universal_input("Do you want to know more about the Rebel Alliance? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                            if response.lower() == "y":
                                cls()
                                print("The cloaked figure nods and continues, 'The Rebel Alliance is a faction that opposes the authoritarian rule of the Galactic Empire. We fight for freedom and justice for all sentient beings in the galaxy.'")
                                print("'We are always looking for brave and daring individuals who are willing to risk everything to fight against the Empire. If you join us, you will have access to our resources, weapons, and intelligence. You will also be able to earn reputation with us by completing quests that involve sabotage, theft, or combat against the Empire.'")
                                response2 = universal_input("Do you want to join the Rebel Alliance? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if response2.lower() == "y":
                                    cls()
                                    print("'Excellent! You have made a wise decision. Welcome to the Rebel Alliance. Here's your insignia, wear it with pride.'")
                                    player.faction = "Rebel Alliance"
                                    player.reputation["Rebel Alliance"] = 0
                                else:
                                    cls()
                                    print("'I understand. Joining a faction is not for everyone. However, if you ever change your mind, you know where to find us.'")
                            else:
                                cls()
                                print("'I see. Well, if you ever change your mind, you know where to find us. The Rebel Alliance is always looking for brave souls who are willing to fight for freedom.'")
                        # Coperate Syndicate function
                        def corporate_syndicate():
                            print("A sleek, well-dressed businessman approaches you and introduces himself as Mr. Johnson, a member of the Corporate Syndicate.")
                            print("'Greetings, traveler. I couldn't help but notice your... shall we say, entrepreneurial spirit. Have you ever considered joining the Corporate Syndicate?'")
                            response = universal_input("Do you want to know more about the Corporate Syndicate? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                            if response.lower() == "y":
                                cls()
                                print("Mr. Johnson smiles and continues: 'The Corporate Syndicate is the most powerful and influential faction in the galaxy. We control most of the trade and resources, and our members are among the richest and most powerful individuals in the galaxy.'")
                                print("'We are always looking for ambitious and talented individuals who can help us expand our reach and influence. If you join us, you will have access to our vast network of resources and contacts, and you will be able to earn reputation with us by completing quests that involve trading, smuggling, or mercenary work.'")
                                response2 = universal_input("Do you want to join the Corporate Syndicate? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if response2.lower() == "y":
                                    cls()
                                    print("'Excellent decision, my friend. Welcome to the Corporate Syndicate. I will provide you with a business card that identifies you as one of our members. You can access our headquarters and resources anytime you want.'")
                                    player.faction = "Corporate Syndicate"
                                    player.reputation["Corporate Syndicate"] = 0
                                else:
                                    cls()
                                    print("'I understand. Joining the Corporate Syndicate is not for everyone. However, if you ever change your mind, don't hesitate to contact me.'")
                            else:
                                cls()
                                print("'I see. Well, if you ever change your mind, don't hesitate to contact me. The Corporate Syndicate is always looking for new talent.'")
                        #Pirate brotherhood faction function
                        def pirate_brotherhood():
                            print("As you walk through the seedy spaceport, a rough-looking individual approaches you.")
                            print("'Avast there, matey! I be Blackbeard, a member of the Pirate Brotherhood. We be the scourge of the galaxy, takin' what we want and answerin' to no one.'")
                            response = universal_input("Do ye want to know more about the Pirate Brotherhood? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                            if response.lower() == "y":
                                print("Blackbeard grins wickedly and continues: 'We be a brotherhood of pirates, raiders, and outlaws, sailin' the spaceways in search of loot and adventure. We live by our own code and rules, and we don't take kindly to interference.'")
                                print("'If ye join us, ye can earn reputation by completin' quests that involve piracy, raidin', or smugglin'. Ye'll have access to our hideouts and safe havens, as well as our network of contacts and suppliers.'")
                                response2 = universal_input("Do ye want to join the Pirate Brotherhood? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if response2.lower() == "y":
                                    print("'Ha ha! Welcome aboard, me hearty! Ye've made a wise choice. Here's yer black flag, to show the galaxy ye're with us.'")
                                    player.faction = "Pirate Brotherhood"
                                    player.reputation["Pirate Brotherhood"] = 0
                                else:
                                    print("'No harm done, matey. Ye're free to go yer own way. But remember, cross us and ye'll regret it.'")
                            else:
                                print("'Suit yerself, matey. But don't come cryin' to us if ye find yerself in trouble.'")
                        #United space alliance room 
                        def united_space_alliance_room():
                            global diplo_mission
                            global quest_board
                            if player.faction == "United Space Alliance":
                                print("You enter the United Space Alliance room. The walls are covered with star maps and scientific charts. You see Dr. Johnson and other members of the faction working on various projects.")
                        
                                print("On one wall, you see a quest board with various requests from the United Space Alliance. Some of the quests catch your eye:")
                        
                                quest_board = {
                                    "1": {"title": "Collect resources from Mars", "reward": 50, "description": "We need someone to collect samples of flora and fauna from Mars. The planet is located in a nearby star system. You will need a spacesuit and basic survival equipment. Please return the samples to Dr. Johnson."},
                                    "2": {"title": "Diplomatic mission to a neighboring planet", "reward": 100, "description": "We need someone to represent the United Space Alliance in a diplomatic mission to a neighboring planet. The mission will involve meeting with the planet's leaders and discussing possible cooperation and trade agreements. Please report to Ambassador Lee for more details."},
                                    "3": {"title": "Search and rescue mission", "reward": 75, "description": "We have lost contact with one of our research stations on a remote moon. We suspect that the station has been attacked by space pirates. We need someone to investigate and rescue any surviving personnel. Please report to Commander Smith for more details."}
                                }
                                
                                for quest_id, quest in quest_board.items():
                                    print(f"{quest_id}. {quest['title']} (Reward: {quest['reward']} credits)")
                        
                                selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                while selected_quest != "exit":
                                    if selected_quest in quest_board:
                                        print(f"{quest_board[selected_quest]['title']}:")
                                        print(quest_board[selected_quest]['description'])
                                        print(f"Reward: {quest_board[selected_quest]['reward']} credits")
                                        accept_quest = universal_input("Do you want to accept this quest? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                        
                                        if accept_quest.lower() == "y":
                                            print(f"You have accepted the quest: {quest_board[selected_quest]['title']}")
                                            player.quests.append(quest_board[selected_quest])
                                           
                                            break 
                                        else:
                                            print("You decide not to accept the quest.")
                                            break
                                    else:
                                        print("Invalid input. Please enter a valid quest number or enter 'exit' to leave the quest board.")
                                        selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                for quest in player.quests:
                                    if quest["title"] in [q["title"] for q in quest_board.values()]:
                                        if quest["title"] == "Diplomatic mission to a neighboring planet":
                                            diplo_mission = True 
                                        elif  quest["title"] == "Search and rescue mission":
                                            search_mission = True
                                
                                return_completed_quest = universal_input("Would you like to turn in your quests? (y/n) ", "y","n", error_message = "I am done with you captain and with you not putting in the correct things.")
                                if return_completed_quest == "y":
                                    complete_united_space_alliance_quest()
                                    print("You now have " + str(money) + " credits")
                                else: 
                                    pass
                                
                            else:
                                print("You are not a member of the United Space Alliance.")

                        #United space alliance quest completetion 
                        def complete_united_space_alliance_quest():
                            global money
                            global quest_board
                            for quest in player.quests:
                                if quest["title"] in [q["title"] for q in quest_board.values()]:
                                    if quest["title"] == "Collect resources from Mars" and "samples" in inventory:
                                        print("You return to Dr. Johnson with the samples of flora and fauna from Mars.")
                                        print("Dr. Johnson examines the samples and rewards you with 50 credits.")
                                        inventory.remove("samples")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        player.quests.remove(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest)]
                                        player.reputation["United Space Alliance"] += 50
                                        print(f"You have gained 50 reputation with the United Space Alliance.")
                                    elif quest["title"] == "Diplomatic mission to a neighboring planet" and "diplomatic report" in inventory:
                                        print("You return to Ambassador Lee with the diplomatic report.")
                                        print("Ambassador Lee is impressed with your work and rewards you with 100 credits.")
                                        inventory.remove("diplomatic report")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        player.quests.remove(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest)]
                                        player.reputation["United Space Alliance"] += 50
                                        print(f"You have gained 50 reputation with the United Space Alliance.")
                                    elif quest["title"] == "Search and rescue mission" and "research data" in inventory:
                                        print("You return to Commander Smith with the rescued personnel.")
                                        print("Commander Smith thanks you for your bravery and rewards you with 75 credits.")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        player.quests.remove(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest)]
                                        player.reputation["United Space Alliance"] += 50
                                        print(f"You have gained 50 reputation with the United Space Alliance.")
                                        break
                            
                        # rebel alliance room
                        def rebel_alliance_room():
                            global imperial_plans
                            global sabotage_supply
                            global rescue_prisoners 
                            global quest_board
                            if player.faction == "Rebel Alliance":
                                print("You enter the Rebel Alliance room. The walls are adorned with banners and posters depicting various rebel symbols and slogans. You see General Organa and other members of the alliance planning their next move.")
                        
                                print("On one wall, you see a quest board with various requests from the Rebel Alliance. Some of the quests catch your eye:")
                        
                                quest_board = {
                                    "1": {"title": "Steal Imperial plans for a new weapon", "reward": 75, "description": "We need someone to infiltrate an Imperial facility and steal plans for a new weapon. The facility is heavily guarded, so you will need to be stealthy and avoid detection. Please report to Captain Solo for more details."},
                                    "2": {"title": "Sabotage an Imperial supply convoy", "reward": 50, "description": "We need someone to sabotage an Imperial supply convoy that is transporting weapons and supplies to one of their bases. The convoy is scheduled to pass through a nearby canyon. Please report to Lieutenant Calrissian for more details."},
                                    "3": {"title": "Rescue rebel prisoners from an Imperial prison", "reward": 100, "description": "We have received intelligence that several rebel operatives are being held in an Imperial prison. We need someone to infiltrate the prison and rescue the prisoners. Please report to Sergeant Ruescott Melshi for more details."}
                                }
                        
                                for quest_id, quest in quest_board.items():
                                    print(f"{quest_id}. {quest['title']} (Reward: {quest['reward']} credits)")
                        
                                selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                        
                                while selected_quest != "exit":
                                    if selected_quest in quest_board:
                                        print(f"{quest_board[selected_quest]['title']}:")
                                        print(quest_board[selected_quest]['description'])
                                        print(f"Reward: {quest_board[selected_quest]['reward']} credits")
                                        accept_quest = universal_input("Do you want to accept this quest? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                        
                                        if accept_quest.lower() == "y":
                                            print(f"You have accepted the quest: {quest_board[selected_quest]['title']}")
                                            player.quests.append(quest_board[selected_quest])
                                            
                                            break 
                                        else:
                                            print("You decide not to accept the quest.")
                                            break

                                    else:
                                        print("Invalid input. Please enter a valid quest number or enter 'exit' to leave the quest board.")
                                        selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                for quest in player.quests:
                                    if quest["title"] in [q["title"] for q in quest_board.values()]:
                                        if quest["title"] == "Steal Imperial plans for a new weapon":
                                            imperial_plans = True 
                                        elif  quest["title"] == "Sabotage an Imperial supply convoy":
                                            sabotage_supply = True
                                        elif quest["title"] == "Rescue rebel prisoners from an Imperial prison":
                                            rescue_prisoners = True
                                return_completed_quest = universal_input("Would you like to turn in your quests? (y/n) ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if return_completed_quest == "y":
                                    complete_united_space_alliance_quest()
                                    print("You now have " + str(money) + " credits")
                                else:
                                    pass
                            else:
                                print("You are not a member of the Rebel Alliance.")

                        def complete_rebel_alliance_quest():
                            global money
                            global quests
                            global quest_board
                            global secure_contract
                            global eliminate_rival
                            global smuggle_goods
                            reputation_gain = 0
                            completed_quests = []
                            for quest in quests:
                                if quest["title"] in [q["title"] for q in quest_board.values() if q["faction"] == "Rebel Alliance"]:
                                    if quest["title"] == "Steal Imperial plans for a new weapon" and "imperial plans" in inventory:
                                        print("You return to Captain Solo with the stolen Imperial plans.")
                                        print("Captain Solo is pleased with your work and rewards you with 75 credits.")
                                        inventory.remove("imperial plans")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Rebel Alliance")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Sabotage an Imperial supply convoy" and "explosives" in inventory:
                                        print("You successfully sabotage the Imperial supply convoy with the explosives.")
                                        print("Lieutenant Calrissian is impressed with your work and rewards you with 50 credits.")
                                        inventory.remove("explosives")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Rebel Alliance")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Rescue rebel prisoners from an Imperial prison" and "Imperial prison keycard in inventory":
                                        print("You successfully rescue the rebel prisoners from the Imperial prison.")
                                        print("Sergeant Ruescott Melshi is grateful for your help and rewards you with 100 credits.")
                                        inventory.remove("prisoners")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Rebel Alliance")]
                                        reputation_gain += 75
                                    else:
                                        continue
                                    quests.remove(quest)
                                    player.reputation["Rebel Alliance"] += reputation_gain
                                    print(f"You have gained {reputation_gain} reputation with the Rebel Alliance.")
                            if len(completed_quests) > 0:
                                print("You have completed the following quests:")
                                for quest in completed_quests:
                                    print(quest["title"])
                            else:
                                print("You don't have any quests that can be completed.")
                        # corperate syndicate room
                        def corporate_syndicate_room():
                            global quest_board
                            global secure_contract
                            global smuggle_goods
                            global eliminate_rival
                            if player.faction == "Corporate Syndicate":
                                print("You enter the Corporate Syndicate room. The walls are adorned with expensive decorations and there are various individuals in suits discussing business deals.")
                                
                                print("On one wall, you see a quest board with various requests from the Corporate Syndicate. Some of the quests catch your eye:")
                                
                                quest_board = {
                                    "1": {"title": "Smuggle illegal goods past the Empire's blockade", "reward": 100, "description": "We need someone to smuggle a shipment of illegal goods past the Empire's blockade. The goods are highly valuable, so you will be well rewarded. Please report to the Syndicate's chief of operations for more details."},
                                    "2": {"title": "Eliminate a rival syndicate's leader", "reward": 150, "description": "We need someone to eliminate the leader of a rival syndicate that has been encroaching on our territory. This will send a message to other would-be competitors. Please report to the Syndicate's chief enforcer for more details."},
                                    "3": {"title": "Secure a valuable mining contract", "reward": 75, "description": "We need someone to secure a mining contract with a valuable resource-rich planet. The negotiations will be tough, but if successful, this could be a huge boon for the Syndicate. Please report to the Syndicate's chief negotiator for more details."}
                                }
                                
                                for quest_id, quest in quest_board.items():
                                    print(f"{quest_id}. {quest['title']} (Reward: {quest['reward']} credits)")
                                
                                selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                
                                while selected_quest != "exit":
                                    if selected_quest in quest_board:
                                        print(f"{quest_board[selected_quest]['title']}:")
                                        print(quest_board[selected_quest]['description'])
                                        print(f"Reward: {quest_board[selected_quest]['reward']} credits")
                                        accept_quest = input("Do you want to accept this quest? (y/n): ")
                                        
                                        if accept_quest.lower() == "y":
                                            print(f"You have accepted the quest: {quest_board[selected_quest]['title']}")
                                            player.quests.append(quest_board[selected_quest])
                                            break 
                                        else:
                                            print("You decide not to accept the quest.")
                                            break
                                    else:
                                        print("Invalid input. Please enter a valid quest number or enter 'exit' to leave the quest board.")
                                        selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                for quest in player.quests:
                                    if quest["title"] == "Smuggle illegal goods past the Empire's blockade":
                                        smuggle_goods = True 
                                    elif quest["title"] == "Eliminate a rival syndicate's leader":
                                        eliminate_rival = True
                                    elif quest["title"] == "Secure a valuable mining contract":
                                        secure_contract = True
                                return_completed_quest = universal_input("Would you like to turn in your quests? (y/n) ", "y","n", error_message = "Invalid input. Please enter 'y' or 'n'")
                                if return_completed_quest == "y":
                                    complete_corporate_syndicate_quest()
                                    print("You now have " + str(money) + " credits")
                                else: 
                                    pass
                            else:
                                print("You are not a member of the Corporate Syndicate.")
                        #corperate syndicate completed quests
                        def complete_corporate_syndicate_quest():
                            global money
                            global quests
                            global quest_board
                            global inventory
                            reputation_gain = 0
                            completed_quests = []
                            for quest in quests:
                                if quest["title"] in [q["title"] for q in quest_board.values() if q["faction"] == "Corporate Syndicate"]:
                                    if quest["title"] == "Smuggle illegal goods past the Empire's blockade" and "illegal goods" in inventory:
                                        print("You successfully smuggle the illegal goods past the Empire's blockade.")
                                        print("The Syndicate's chief of operations is pleased with your work and rewards you with 100 credits.")
                                        inventory.remove("illegal goods")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Corporate Syndicate")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Eliminate a rival syndicate's leader" and "weapon" in inventory:
                                        print("You successfully eliminate the leader of a rival syndicate with your weapon.")
                                        print("The Syndicate's chief enforcer is impressed with your work and rewards you with 150 credits.")
                                        inventory.remove("weapon")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Corporate Syndicate")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Secure a valuable mining contract" and "negotiation skills" in inventory:
                                        print("You successfully negotiate a valuable mining contract with a resource-rich planet.")
                                        print("The Syndicate's chief negotiator is pleased with your work and rewards you with 75 credits.")
                                        inventory.remove("negotiation skills")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Corporate Syndicate")]
                                        reputation_gain += 75
                                    else:
                                        continue
                                    
                                    quests.remove(quest)
                                    player.reputation["Corporate Syndicate"] += reputation_gain
                                    print(f"You have gained {reputation_gain} reputation with the Corporate Syndicate.")
                                    
                            if len(completed_quests) > 0:
                                print("You have completed the following quests:")
                                for quest in completed_quests:
                                    print(quest["title"])
                            else:
                                print("You don't have any quests that can be completed.")

                        #pirate brotherhood room
                        def pirate_brotherhood_room():
                            global quest_board
                            global raid_convy 
                            global eliminate_pirate
                            global steal_artifact
                            global smuggle_contraband 
                            if player.faction == "Pirate Brotherhood":
                                print("You enter the Pirate Brotherhood room. The air is thick with the smell of alcohol and there are rough-looking characters gathered around tables playing dice.")
                                print("On one wall, you see a quest board with various requests from the Pirate Brotherhood. Some of the quests catch your eye:")
                                
                                quest_board = {
                                    "1": {"title": "Raid a wealthy merchant convoy", "reward": 150, "description": "We need someone to raid a convoy of wealthy merchants and seize their cargo. The merchants are likely to have hired protection, so be prepared for a fight. Please report to the Pirate Brotherhood's captain for more details."},
                                    "2": {"title": "Eliminate a rival pirate crew", "reward": 200, "description": "We need someone to eliminate a rival pirate crew that has been operating in our territory. They have been interfering with our operations and need to be taught a lesson. Please report to the Pirate Brotherhood's quartermaster for more details."},
                                    "3": {"title": "Steal a valuable artifact from a heavily guarded museum", "reward": 100, "description": "We need someone to steal a valuable artifact from a heavily guarded museum. The artifact is said to have belonged to an ancient civilization and is worth a fortune on the black market. Please report to the Pirate Brotherhood's master thief for more details."},
                                    "4": {"title": "Smuggle contraband past a space station's security", "reward": 75, "description": "We need someone to smuggle a shipment of illegal contraband past a space station's security checkpoints. The contraband is highly valuable, but the space station's security is tight. Please report to the Pirate Brotherhood's smuggler for more details."}
                                }
                                
                                for quest_id, quest in quest_board.items():
                                    print(f"{quest_id}. {quest['title']} (Reward: {quest['reward']} credits)")
                                
                                selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                
                                while selected_quest != "exit":
                                    if selected_quest in quest_board:
                                        print(f"{quest_board[selected_quest]['title']}:")
                                        print(quest_board[selected_quest]['description'])
                                        print(f"Reward: {quest_board[selected_quest]['reward']} credits")
                                        accept_quest = universal_input("Do you want to accept this quest? (y/n): ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                        
                                        if accept_quest.lower() == "y":
                                            print(f"You have accepted the quest: {quest_board[selected_quest]['title']}")
                                            player.quests.append(quest_board[selected_quest])
                                            break 
                                        else:
                                            print("You decide not to accept the quest.")
                                            break
                                    else:
                                        print("Invalid input. Please enter a valid quest number or enter 'exit' to leave the quest board.")
                                        selected_quest = input("Enter the quest number to learn more about the quest or enter 'exit' to leave the quest board: ")
                                for quest in player.quests:
                                    if quest["title"] == "Raid a wealthy merchant convoy":
                                        raid_convy = True 
                                    elif quest["title"] == "Eliminate a rival pirate crew":
                                        eliminate_pirate = True
                                    elif quest["title"] == "Steal a valuable artifact from a heavily guarded museum":
                                        steal_artifact = True 
                                    elif quest["title"] == "Smuggle contraband past a space station's security":
                                        smuggle_contraband = True 
                                return_completed_quest = universal_input("Would you like to turn in your quests? (y/n) ", "Y", "N", "y", "n", error_message = "That is not an option, please try again regarding your choice.")
                                if return_completed_quest.lower() == "y":
                                    complete_pirate_brotherhood_quest()
                                    print("You now have " + str(money) + " credits")
                                else: 
                                    pass
                            else:
                                print("You are not a member of the pirate brotherhood")
                                
                        # pirate brotherhood completed quests
                        def complete_pirate_brotherhood_quest():
                            global money
                            global quests
                            global quest_board
                            global inventory
                            reputation_gain = 0
                            completed_quests = []
                            for quest in quests:
                                if quest["title"] in [q["title"] for q in quest_board.values() if q["faction"] == "Pirate Brotherhood"]:
                                    if quest["title"] == "Raid a wealthy merchant convoy" and "weapon" in inventory:
                                        print("You successfully raid a wealthy merchant convoy and seize their cargo.")
                                        print("The Pirate Brotherhood's captain is pleased with your work and rewards you with 150 credits.")
                                        inventory.remove("weapon")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Pirate Brotherhood")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Eliminate a rival pirate crew" and "weapon" in inventory:
                                        print("You successfully eliminate a rival pirate crew.")
                                        print("The Pirate Brotherhood's quartermaster is impressed with your work and rewards you with 200 credits.")
                                        inventory.remove("weapon")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Pirate Brotherhood")]
                                        reputation_gain += 50
                                    elif quest["title"] == "Steal a valuable artifact from a heavily guarded museum" and "stealth skills" in inventory:
                                        print("You successfully steal a valuable artifact from a heavily guarded museum.")
                                        print("The Pirate Brotherhood's master thief is pleased with your work and rewards you with 100 credits.")
                                        inventory.remove("stealth skills")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Pirate Brotherhood")]
                                        reputation_gain += 75
                                    elif quest["title"] == "Smuggle contraband past a space station's security" and "smuggling skills" in inventory:
                                        print("You successfully smuggle a shipment of illegal contraband past a space station's security checkpoints.")
                                        print("The Pirate Brotherhood's smuggler is pleased with your work and rewards you with 75 credits.")
                                        inventory.remove("smuggling skills")
                                        money += next(q["reward"] for q in quest_board.values() if q["title"] == quest["title"])
                                        completed_quests.append(quest)
                                        del quest_board[next(k for k, v in quest_board.items() if v == quest and v["faction"] == "Pirate Brotherhood")]
                                        reputation_gain += 75
                                    else:
                                        continue

                                    quests.remove(quest)
                                    player.reputation["Pirate Brotherhood"] += reputation_gain
                                    print(f"You have gained {reputation_gain} reputation with the Pirate Brotherhood.")
                                    
                            if len(completed_quests) > 0:
                                print("You have completed the following quests:")
                                for quest in completed_quests:
                                    print(quest["title"])
                            else:
                                print("You don't have any quests that can be completed.")

                        #Enter a faction room function
                        def enter_faction_room():
                            if player.faction == "United Space Alliance":
                                united_space_alliance_room()
                                check_reputation()
                                # Add any additional actions or interactions here
                            elif player.faction == "Corporate Syndicate":
                                corporate_syndicate_room()
                                check_reputation()
                                # Add any additional actions or interactions here
                            elif player.faction == "Pirate Brotherhood":
                                pirate_brotherhood_room()
                                check_reputation()
                                # Add any additional actions or interactions here
                            elif player.faction == "Rebel Alliance":
                                rebel_alliance_room()
                                check_reputation()
                                print("You enter the Rebel Alliance room. The walls are adorned with posters of the Alliance emblem and various rebellion symbols. You see a group of freedom fighters and rebels discussing their latest plans to take down the Empire.")
                                # Add any additional actions or interactions here
                            else:
                                print("You are not a member of any faction.")
                        #Function for the room of the galactic hub
                        def galactic_hub():
                            cls()
                            #Welcome the user
                            print("Welcome to the Galactic Hub!")
                            print("Here you can learn about different factions and join their ranks.")
                            while True:
                                #Prompt the user what they want to do within the room
                                choice = universal_input("\nWhat would you like to do?\n1. Learn about factions\n2. Enter your faction room\n3. Enter the gambling room\n4. Leave the galactic hub\nEnter your choice (1-4): ", "1","2","3","4", error_message = "That is not a number between 1-4, please try again.")
                                if choice == "1":
                                    print("Faction List:")
                                    print("1. United Space Alliance")
                                    print("2. Rebel Alliance")
                                    print("3. Corporate Syndicate")
                                    print("4. Pirate Brotherhood")
                                    #Prompt the user what faction they want to learn more about
                                    faction_choice = universal_input("Enter the number of the faction you want to learn about: ", "1","2","3","4", error_message = "Bro this is one of the most important parts and you can't even choose the right number?")
                                    if faction_choice == "1":
                                        cls()
                                        united_space_alliance()
                                    elif faction_choice == "2":
                                        cls()
                                        rebel_alliance()
                                    elif faction_choice == "3":
                                        cls()
                                        corporate_syndicate()
                                    elif faction_choice == "4":
                                        cls()
                                        pirate_brotherhood()
                                #Choice for entering your own faction room
                                elif choice == "2":
                                    cls()
                                    enter_faction_room()
                                #Gambling room choice
                                elif choice == "3":
                                    global chips
                                    chips = chips
                                    def gambling_function():
                                        cls()
                                        #Globalizing important variables used throughout this code
                                        global amount
                                        global money
                                        global recheck
                                        global chips
                                        #Function to print the six options that the user can pick from in the gambling room
                                        def gambling_room():
                                            global gambling_choice
                                            cls()
                                            print("Money: " + str(money) + "\n" + "Chips: " + str(chips) + "\n\nWelcome to the Gambling room!")
                                            gambling_choice = universal_input("You have 6 options\n1. Read a book\n2. Slots\n3. Reaction Speed\n4. Higher or Lower\n5. Talk to Oola\n6. Exit\n", 1,2,3,4,5,6, error_message = "That is not a choice to pick, please try again.")
                                        gambling_room()
                                        #If they don't want to play
                                        if gambling_choice == 1:
                                            print("You chose to not have a gambling addiction.\n That was a very smart move\n You read a book and decide that having a gambling addiction \nis way better than actually reading.")
                                            input("Press enter to continue")
                                            gambling_function()
                                        
                                        #Slots game
                                        elif gambling_choice == 2:
                                            cls()
                                            #Making random symbols for the slots game with a dictionary
                                            symbols = ["Cherry", "Bell", "Bar", "Seven", "Diamond"]
                                            payouts = {"Cherry": 2, "Bell": 5, "Bar": 10, "Seven": 20, "Diamond": 50}
                                            def play_slot_machine():
                                            #Generate random symbols for each reel
                                                reel1 = random.choice(symbols)
                                                reel2 = random.choice(symbols)
                                                reel3 = random.choice(symbols)
                                                #Print the result
                                                print(f"{reel1} | {reel2} | {reel3}")
                                                #Calculate the payout based on the symbols
                                                if reel1 == reel2 == reel3:
                                                    payout = payouts[reel1] * 3
                                                    print(f"Congratulations! You won {payout} coins!")
                                                elif reel1 == reel2 or reel1 == reel3 or reel2 == reel3:
                                                    payout = payouts[reel1] + payouts[reel2] + payouts[reel3]
                                                    print(f"Congratulations! You won {payout} coins!")
                                                else:
                                                    print("Sorry, you didn't win this time.")
                                            #Main slots function
                                            def slots():
                                                cls()
                                                global chips
                                                #Check if they have enough chips to play
                                                while chips > 0:
                                                    cls()
                                                    #Introduce the user to the game
                                                    print("Money: " + str(money) + "\n" + "Chips: " + str(chips))
                                                    print("\n\t\t\t\t$$$ Spin to Win $$$")
                                                    #Ask if they would like to play, if yes play, if not leave back to the gambling room
                                                    choice = universal_input("Would you like to spin? (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                    if choice.upper() == "Y":
                                                        #Function for asking money and reassuring the user
                                                        def ask_money():
                                                            global recheck
                                                            global amount
                                                            amount = int(input("How many chips would you like to deposit? "))
                                                            #Make sure the input is valid
                                                            while amount != int(amount) or amount <= 0 or amount == "" or amount > chips:
                                                                if amount > chips:
                                                                    print("You do not have enough chips to bet that amount, Talk to oola and convert your money to chips!")
                                                                    amount = int(input("How many chips would you like to deposit? "))
                                                                else:
                                                                    print("That is not a monetary value, please try again")
                                                                    amount = int(input("How many chips would you like to deposit? "))
                                                            recheck = universal_input("Are you sure you would like to deposit " + str(amount) + " chips? This will be deducted from your chip count each time you spin. (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                        #Call the function
                                                        ask_money()
                                                        #Play the game while the user presses "Y", and deduct chips, if not, leave
                                                        while recheck.upper() == "Y":
                                                            spin = universal_input("Type 'Y' to spin or 'N' to leave!", "y","Y","n","N", error_message = "That is not an option, please try again.")
                                                            if spin.upper() == "Y":
                                                                chips = chips - amount
                                                                play_slot_machine()
                                                            elif spin.upper() == "N":
                                                                break
                                                        if recheck.upper() == "N":
                                                            ask_money()
                                                    #Choice back to the gambling room
                                                    elif choice.upper() == "N":
                                                        cls()
                                                        gambling_function()
                                                #If they don't have enough chips to play, print this and go back to the gambling room
                                                else:
                                                    print("You have no chips! Talk to oola and convert your money to chips!")
                                                    gambling_function()
                                            #Call the function
                                            slots()
                                        #Reaction speed game
                                        elif gambling_choice == 3:
                                            global game_start
                                            global chips
                                            cls()
                                            game_start = 0
                                            while True:
                                                #Ask the user what they would like to do within the game
                                                game_start = universal_input("What would you like to do?\n 1. Play reaction speed test \n 2. See past reaction speed times\n 3. Check the Leaderboard \n 4. Exit\n ", 1,2,3,4, error_message = "My homie please just follow these simple instructions.") 
                                                #Function for the main game
                                                def reaction_speed():
                                                    #Globalize variables for use around the code
                                                    global game_start
                                                    global chips 
                                                    global speed_times 
                                                    cls()
                                                    #A stop watch for use within timing the game
                                                    def stop_watch(sec):
                                                        mins = sec // 60
                                                        sec = sec % 60
                                                        hours = mins // 60 
                                                        mins = mins % 60
                                                        print("Time Lapsed = {0}".format(sec))
                                                        return sec 
                                                    cls()
                                                    #Pick a value 1-10 for the screen to display, when the user sees it they enter
                                                    random_time_values = random.randint(1,10)
                                                    #If the first option in the game is to play, do this
                                                    if game_start == 1:
                                                        #The actual reaction speed game
                                                        def react():
                                                            global chips
                                                            #Rules for the user
                                                            universal_input("In a few seconds you will see a word pop up. When that happens immediately hit the enter key! Hit enter to start", "", error_message = "Just hit enter man! ")
                                                            print("Hit enter when you see the word pop up!")
                                                            time.sleep(random_time_values) # this stops the program for random secs 
                                                            cls()
                                                            start_time = time.time() # this starts the stop watch 
                                                            input("Press Enter to stop")
                                                            end_time = time.time() # ends stop watch
                                                            time_lapsed = end_time - start_time
                                                            
                                                            time_lapsed = round(time_lapsed,3)
                                                            stop_watch(time_lapsed) # prints out the time it took for the user to hit "enter "
                                                            if time_lapsed <=.088:
                                                                pass
                                                            else: 
                                                                speed_times.append(time_lapsed)
                                                                add_score(name, time_lapsed)

                                                            #right below takes how long it took them and gives a message based off that value 
                                                            def Average(lists):
                                                                global average
                                                                return sum(lists) / len(lists)
                                                                average = Average(speed_times)
                                                            if time_lapsed == 0:
                                                                print("YOU CHEATED NO CHIPS FOR U \n")
                                                                print("You now have "+ str(chips))
                                                            elif time_lapsed <=.3:
                                                                print("YOOOO YOUR FAST FAST\n Here are some credits for doing so good\n")
                                                                chips = chips + amount + amount
                                                                print("You now have " + str(chips))
                                                            elif time_lapsed <=.4:
                                                                print("Alright you're pretty good\n")
                                                                chips += amount + 100 
                                                                print("You now have "+ str(chips))
                                                            elif time_lapsed <= .5:
                                                                print("Yaaaaah you're pretty average.\n")
                                                                chips += amount 
                                                                print("You now have " +str(chips))
                                                            elif time_lapsed >= .5:
                                                                print("Alright Captian you are just slow. Thats all.\n")
                                                                print("You now have " + str(chips))
                                                        #Main react code piece
                                                        if chips > 0:
                                                            cls()
                                                            #Introduce the user to the main game
                                                            print("Money: " + str(money) + "\n" + "Chips: " + str(chips))
                                                            print("\n\t\t\t\t$$$ React to Win $$$")
                                                            #Ask if they would like to play, if yes execute game code, if not go back to hub
                                                            choice = universal_input("Would you like to test your reaction speed for some cash? (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                            if choice.upper() == "Y":
                                                                #Function for prompting user for money
                                                                def ask_money():
                                                                    global recheck
                                                                    global amount
                                                                    amount = int(input("How many chips would you like to deposit? "))
                                                                    while amount != int(amount) or amount <= 0 or amount == "" or amount > chips:
                                                                        if amount > chips:
                                                                            print("You do not have enough chips to bet that amount, Talk to oola and convert your money to chips!")
                                                                            amount = int(input("How many chips would you like to deposit? "))
                                                                        else:
                                                                            print("That is not a monetary value, please try again")
                                                                            amount = int(input("How many chips would you like to deposit? "))
                                                                    recheck = universal_input("Are you sure you would like to deposit " + str(amount) + " chips? This will be deducted from your chip count each time you play. (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                                #Calling it
                                                                ask_money()
                                                                #While the user wants to play the game, deduct the chips, if not, they leave
                                                                while recheck.upper() == "Y":
                                                                    play = universal_input("Type 'Y' to play or 'N' to leave!", "y","Y","n","N", error_message = "That is not an option, please try again.")
                                                                    if play.upper() == "Y":
                                                                        chips = chips - amount
                                                                        react()
                                                                        break
                                                                    elif play.upper() == "N":
                                                                        break
                                                                if recheck.upper() == "N":
                                                                    ask_money()
                                                            #Back to the gambling room
                                                            elif choice.upper() == "N":
                                                                cls()
                                                                gambling_function()
                                                        else:
                                                            print("You have no chips! Talk to oola and convert your money to chips!")
                                                            gambling_function()
                                                    #Leaderboard statements, if they have no record, they have to play the game, else it will display it
                                                    elif game_start == 2:
                                                        if len(speed_times) == 0:
                                                            print("You do not have any previous scores, go play the game!")
                                                        else:
                                                            print("Here are your previous scores:\n " + str(speed_times))
                                                    #Online game scores
                                                    elif game_start == 3:
                                                        print("Here are the top online scores!")
                                                        print(get_top_scores())
                                                    #Back to the gambling room
                                                    elif game_start == 4:
                                                        gambling_function()
                                                #Calling the function
                                                reaction_speed()
                                        #Higher or lower game
                                        elif gambling_choice == 4:
                                            global first
                                            first = True
                                            def higher_or_lower():
                                                global first
                                                global number
                                                global attempts
                                                global count
                                                global win
                                                if first:
                                                    attempts = 5
                                                    count = 0
                                                    win = False
                                                    first = False
                                                #A function that rewards the user based on the attempts they used to get the number
                                                def count_to_value():
                                                    global chips
                                                    global count
                                                    global win
                                                    if win:
                                                        #Best reward
                                                        if count == 1:
                                                            temp_chips = amount
                                                            chips += amount
                                                            print("You earned " + str(temp_chips) + " chips!")
                                                            count = 0
                                                            win = False
                                                        #2nd best reward
                                                        elif count > 1 and count <= 4:
                                                            temp_chips = (amount / 3)
                                                            chips += (amount / 3)
                                                            print("You earned " + str(temp_chips) + " chips!")
                                                            count = 0
                                                            win = False
                                                        #3rd best reward
                                                        elif count >= 5 and count <= 8:
                                                            temp_chips = (amount / 5)
                                                            chips += (amount / 5)
                                                            print("You earned " + str(temp_chips) + " chips!")
                                                            count = 0
                                                            win = False
                                                    #Worst reward, lose money
                                                    else:
                                                        temp_chips = amount
                                                        chips -= amount
                                                        print("You lost " + str(temp_chips) + " chips.")
                                                        count = 0
                                                if first:
                                                    first = False
                                                #game statements
                                                guess = int(input("Enter a number 1-100: "))
                                                while guess != int(guess) or guess <= 0 or guess == "" or guess > 100:
                                                    print("That is not a value between 1-100, please try again")
                                                    guess = int(input("Enter a number 1-100: "))
                                                #Game logic, if they are higher or lower than the number, try again
                                                else:
                                                    if attempts == 0:
                                                        attempts = 5
                                                        print("You have ran out of attempts!")
                                                        count_to_value()
                                                        option = universal_input("Would you like to play again? (Y/N) ", "y","Y","n","N", error_message = "That is not an option captain, please try again")
                                                        if option.upper() == "Y":
                                                            hol_game()
                                                        elif option.upper() == "N":
                                                            gambling_function()
                                                    elif guess < number:
                                                        attempts -= 1
                                                        count += 1
                                                        print("You have " + str(attempts) + " left!")
                                                        print("You are lower than the number!")
                                                    elif guess > number:
                                                        attempts -= 1
                                                        count += 1
                                                        print("You have " + str(attempts) + " left!")
                                                        print("You are higher than the number!")
                                                    elif guess == number:
                                                        win = True
                                                        attempts = 5
                                                        count += 1
                                                        print("You win!")
                                                        count_to_value()
                                                        #Continue playing if yes, else go back to the gambling function
                                                        option = universal_input("Would you like to play again? (Y/N) ", "y","Y","n","N", error_message = "That is not an option captain, please try again")
                                                        if option.upper() == "Y":
                                                            hol_game()
                                                        elif option.upper() == "N":
                                                            gambling_function()
                                            #Higher or lower main game function
                                            def hol_game():
                                                cls()
                                                global number
                                                #Choose a random number 1-100 for later
                                                number = random.randint(1,100)
                                                global chips
                                                #They can play the game while they have more than a single chip
                                                while chips > 0:
                                                    #Welcome the user
                                                    print("Money: " + str(money) + "\n" + "Chips: " + str(chips))
                                                    print("\n\t\t\t\tWelcome to Higher or Lower!")
                                                    #Ask if they would like to play, if yes introduce them to the game, if no return back to the gambling room
                                                    choice = universal_input("Would you like to play? (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please type yes or no.")
                                                    if choice.upper() == "Y":
                                                        #Function for asking the amount that a user would like to deposit for the game
                                                        def ask_money():
                                                            global recheck
                                                            global amount
                                                            amount = int(input("How many chips would you like to deposit? "))
                                                            #Checks that their input is correct
                                                            while amount != int(amount) or amount <= 0 or amount == "" or amount > chips:
                                                                if amount > chips:
                                                                    print("You do not have enough chips to bet that amount, Talk to oola and convert your money to chips!")
                                                                    amount = int(input("How many chips would you like to deposit? "))
                                                                else:
                                                                    print("That is not a monetary value, please try again")
                                                                    amount = int(input("How many chips would you like to deposit? "))
                                                            #Reassures the user of their choice, and introduces them to the main game
                                                            recheck = universal_input("Are you sure you would like to deposit " + str(amount) + " chips? This will be deducted from your chip count each time you play. (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                            print("You will have five attempts, guess until you get the right number!\n")
                                                        #Call money function
                                                        ask_money()
                                                        #Play the game while the user's choice is yes, if they don't want to play, go back to the gambling room
                                                        while recheck.upper() == "Y":
                                                            higher_or_lower()
                                                        if recheck.upper() == "N":
                                                            ask_money()
                                                    elif choice.upper() == "N":
                                                        cls()
                                                        gambling_function()
                                                else:
                                                    print("You have no chips! Talk to oola and convert your money to chips!")
                                                    gambling_function()
                                            hol_game()
                                        #Chip Converter choice
                                        elif gambling_choice == 5:
                                            cls()
                                            #Make sure they have enough money to go in and or chips
                                            while money >= 1 or chips >= 1:
                                                #Welcome them to the shop, ask them what they would like to do
                                                print("Money: " + str(money) + "\n" + "Chips: " + str(chips) + "\n")
                                                print("Oola: Oo oo OO Oo OOOoooooo! Welcome to the chip converter!")
                                                choice = universal_input("Oola: What would you like to do? 1.Convert Money to Chips 2. Convert Chips to money 3. Exit", 1,2,3, error_message = "Oola: Oo Ooo! That is not an option, please try again")
                                                #Make sure they have enough money for this option and ask how much they would like
                                                if choice == 1 and money >= 1:
                                                    how_much = universal_input("How many chips would you like? This will be deducted from your balance\n1, 2, 5, 25, 50, 100, 500, 1000, 5000, 10000 ", 1,2,5,25,50,100,500,1000,5000,10000, error_message = "That is not a monetary value that is listed, please try again")
                                                    #Check if they have enough money for the transaction
                                                    if money < how_much:
                                                        print("\nYou do not have the adequate amount of funds for that, please try again.\n")
                                                    #Else, reassure the user if they want to spend that much
                                                    else:
                                                        reassure = universal_input("Are you sure you would like to convert $" + str(how_much) + " to chips? (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                        if reassure.upper() == "Y":
                                                            print("\nOola: Successful!\n")
                                                            chips += how_much
                                                            money -= how_much
                                                        elif reassure.upper() == "N":
                                                            break
                                                #Make sure they have enough chips for this option and ask how much they would like
                                                elif choice == 2 and chips >= 1:
                                                    how_much = universal_input("How many chips would you like to convert back to money? This will be deducted from your chips\n1, 2, 5, 25, 50, 100, 500, 1000, 5000, 10000 ", 1,2,5,25,50,100,500,1000,5000,10000, error_message = "That is not a monetary value that is listed, please try again")
                                                    #Check if they have enough chips for the transaction
                                                    if chips < how_much:
                                                        print("\nYou do not have the adequate amount of funds for that, please try again.\n")
                                                    #Else, reassure the user if they want to spend that much
                                                    else:
                                                        reassure = universal_input("Are you sure you would like to convert " + str(how_much) + " chips back to money? (Y/N) ", "y", "Y", "n", "N", error_message = "That is not an option, please try again.")
                                                        if reassure.upper() == "Y":
                                                            print("\nOola: Successful!\n")                                                                
                                                            money += how_much
                                                            chips -= how_much
                                                        elif reassure.upper() == "N":
                                                            break
                                                #Exit option back to the gambling room
                                                elif choice == 3:
                                                    gambling_function()
                                                #Print statement if they don't have enough money to go in the shop
                                                else:
                                                    print("Oola: Oo oo OO! You do not have the adequate amount of funds for that, please come back when you have a single chip or dollar.")
                                        #Option to go back to the hub within the gambling function
                                        elif gambling_choice == 6:
                                            galactic_hub()
                                    #Called gambling room function
                                    gambling_function()
                                elif choice == "4":
                                    break 
                        #Called hub function
                        galactic_hub()
                    elif exploreShip == "7":
                        backFromPlanet()
        planetActivities()                
    atPlanetActions(planetSelect())
#Main game function
game_choice()
